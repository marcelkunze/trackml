#ifndef TMVAClassification_MLP3_H
#define TMVAClassification_MLP3_H
// Class: ReadMLP3
// Automatically generated by MethodBase::MakeClass
//

/* configuration options =====================================================

#GEN -*-*-*-*-*-*-*-*-*-*-*- general info -*-*-*-*-*-*-*-*-*-*-*-

Method         : MLP::MLP3
TMVA Release   : 4.2.1         [262657]
ROOT Release   : 6.16/00       [397312]
Creator        : marcel
Date           : Tue May 28 06:53:48 2019
Host           : Linux SFT-ubuntu-1804-3 4.15.0-38-generic #41-Ubuntu SMP Wed Oct 10 10:59:38 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
Dir            : /home/marcel/workspace/tracking/macro
Training events: 500000
Analysis type  : [Classification]


#OPT -*-*-*-*-*-*-*-*-*-*-*-*- options -*-*-*-*-*-*-*-*-*-*-*-*-

# Set by User:
NCycles: "100" [Number of training cycles]
HiddenLayers: "15,5" [Specification of hidden layer architecture]
NeuronType: "tanh" [Neuron activation function type]
V: "False" [Verbose output (short form of "VerbosityLevel" below - overrides the latter one)]
VarTransform: "N" [List of variable transformations performed before training, e.g., "D_Background,P_Signal,G,N_AllClasses" for: "Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)"]
H: "False" [Print method-specific help message]
TestRate: "5" [Test for overtraining performed at each #th epochs]
UseRegulator: "False" [Use regulator to avoid over-training]
# Default:
RandomSeed: "1" [Random seed for initial synapse weights (0 means unique seed for each run; default value '1')]
EstimatorType: "CE" [MSE (Mean Square Estimator) for Gaussian Likelihood or CE(Cross-Entropy) for Bernoulli Likelihood]
NeuronInputType: "sum" [Neuron input function type]
VerbosityLevel: "Default" [Verbosity level]
CreateMVAPdfs: "False" [Create PDFs for classifier outputs (signal and background)]
IgnoreNegWeightsInTraining: "False" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]
TrainingMethod: "BP" [Train with Back-Propagation (BP), BFGS Algorithm (BFGS), or Genetic Algorithm (GA - slower and worse)]
LearningRate: "2.000000e-02" [ANN learning rate parameter]
DecayRate: "1.000000e-02" [Decay rate for learning parameter]
EpochMonitoring: "False" [Provide epoch-wise monitoring plots according to TestRate (caution: causes big ROOT output file!)]
Sampling: "1.000000e+00" [Only 'Sampling' (randomly selected) events are trained each epoch]
SamplingEpoch: "1.000000e+00" [Sampling is used for the first 'SamplingEpoch' epochs, afterwards, all events are taken for training]
SamplingImportance: "1.000000e+00" [ The sampling weights of events in epochs which successful (worse estimator than before) are multiplied with SamplingImportance, else they are divided.]
SamplingTraining: "True" [The training sample is sampled]
SamplingTesting: "False" [The testing sample is sampled]
ResetStep: "50" [How often BFGS should reset history]
Tau: "3.000000e+00" [LineSearch "size step"]
BPMode: "sequential" [Back-propagation learning mode: sequential or batch]
BatchSize: "-1" [Batch size: number of events/batch, only set if in Batch Mode, -1 for BatchSize=number_of_events]
ConvergenceImprove: "1.000000e-30" [Minimum improvement which counts as improvement (<0 means automatic convergence check is turned off)]
ConvergenceTests: "-1" [Number of steps (without improvement) required for convergence (<0 means automatic convergence check is turned off)]
UpdateLimit: "10000" [Maximum times of regulator update]
CalculateErrors: "False" [Calculates inverse Hessian matrix at the end of the training to be able to calculate the uncertainties of an MVA value]
WeightRange: "1.000000e+00" [Take the events for the estimator calculations from small deviations from the desired value to large deviations only over the weight range]
##


#VAR -*-*-*-*-*-*-*-*-*-*-*-* variables *-*-*-*-*-*-*-*-*-*-*-*-

NVar 10
rz1                           rz1                           rz1                           rz1                                                             'F'    [30.2008743286,825.274047852]
phi1                          phi1                          phi1                          phi1                                                            'F'    [-3.14158201218,3.14147925377]
z1                            z1                            z1                            z1                                                              'F'    [-1804.5,1804.5]
rz2                           rz2                           rz2                           rz2                                                             'F'    [30.2085323334,942.453063965]
phi2                          phi2                          phi2                          phi2                                                            'F'    [-3.1415772438,3.14154338837]
z2                            z2                            z2                            z2                                                              'F'    [-2154.5,2154.5]
rz3                           rz3                           rz3                           rz3                                                             'F'    [30.4136562347,1022.02819824]
phi3                          phi3                          phi3                          phi3                                                            'F'    [-3.14158201218,3.14154338837]
z3                            z3                            z3                            z3                                                              'F'    [-2554.5,2554.5]
log(score)                    log_score_                    log(score)                    log(score)                                                      'F'    [-31.1916236877,6.40001583099]
NSpec 0


============================================================================ */

#include <array>
#include <vector>
#include <cmath>
#include <string>
#include <iostream>

#ifndef IClassifierReader__def
#define IClassifierReader__def

class IClassifierReader {

 public:

   // constructor
   IClassifierReader() : fStatusIsClean( true ) {}
   virtual ~IClassifierReader() {}

   // return classifier response
   virtual double GetMvaValue( const std::vector<double>& inputValues ) const = 0;

   // returns classifier status
   bool IsStatusClean() const { return fStatusIsClean; }

 protected:

   bool fStatusIsClean;
};

#endif

class ReadMLP3 : public IClassifierReader {

 public:

   // constructor
   ReadMLP3( std::vector<std::string>& theInputVars )
      : IClassifierReader(),
        fClassName( "ReadMLP3" ),
        fNvars( 10 )
   {
      // the training input variables
      const char* inputVars[] = { "rz1", "phi1", "z1", "rz2", "phi2", "z2", "rz3", "phi3", "z3", "log(score)" };

      // sanity checks
      if (theInputVars.size() <= 0) {
         std::cout << "Problem in class \"" << fClassName << "\": empty input vector" << std::endl;
         fStatusIsClean = false;
      }

      if (theInputVars.size() != fNvars) {
         std::cout << "Problem in class \"" << fClassName << "\": mismatch in number of input values: "
                   << theInputVars.size() << " != " << fNvars << std::endl;
         fStatusIsClean = false;
      }

      // validate input variables
      for (size_t ivar = 0; ivar < theInputVars.size(); ivar++) {
         if (theInputVars[ivar] != inputVars[ivar]) {
            std::cout << "Problem in class \"" << fClassName << "\": mismatch in input variable names" << std::endl
                      << " for variable [" << ivar << "]: " << theInputVars[ivar].c_str() << " != " << inputVars[ivar] << std::endl;
            fStatusIsClean = false;
         }
      }

      // initialize min and max vectors (for normalisation)
      fVmin[0] = -1;
      fVmax[0] = 1;
      fVmin[1] = -1;
      fVmax[1] = 1;
      fVmin[2] = -1;
      fVmax[2] = 0.99999988079071;
      fVmin[3] = -1;
      fVmax[3] = 0.99999988079071;
      fVmin[4] = -1;
      fVmax[4] = 0.99999988079071;
      fVmin[5] = -1;
      fVmax[5] = 1;
      fVmin[6] = -1;
      fVmax[6] = 1;
      fVmin[7] = -1;
      fVmax[7] = 1;
      fVmin[8] = -1;
      fVmax[8] = 1;
      fVmin[9] = -1;
      fVmax[9] = 1;

      // initialize input variable types
      fType[0] = 'F';
      fType[1] = 'F';
      fType[2] = 'F';
      fType[3] = 'F';
      fType[4] = 'F';
      fType[5] = 'F';
      fType[6] = 'F';
      fType[7] = 'F';
      fType[8] = 'F';
      fType[9] = 'F';

      // initialize constants
      Initialize();

      // initialize transformation
      InitTransform();
   }

   // destructor
   virtual ~ReadMLP3() {
      Clear(); // method-specific
   }

   // the classifier response
   // "inputValues" is a vector of input values in the same order as the
   // variables given to the constructor
   double GetMvaValue( const std::vector<double>& inputValues ) const override;

 private:

   // method-specific destructor
   void Clear();

   // input variable transformation

   double fOff_1[3][10];
   double fScal_1[3][10];
   void InitTransform_1();
   void Transform_1( std::vector<double> & iv, int sigOrBgd ) const;
   void InitTransform();
   void Transform( std::vector<double> & iv, int sigOrBgd ) const;

   // common member variables
   const char* fClassName;

   const size_t fNvars;
   size_t GetNvar()           const { return fNvars; }
   char   GetType( int ivar ) const { return fType[ivar]; }

   // normalisation of input variables
   double fVmin[10];
   double fVmax[10];
   double NormVariable( double x, double xmin, double xmax ) const {
      // normalise to output range: [-1, 1]
      return 2*(x - xmin)/(xmax - xmin) - 1.0;
   }

   // type of input variable: 'F' or 'I'
   char   fType[10];

   // initialize internal variables
   void Initialize();
   double GetMvaValue__( const std::vector<double>& inputValues ) const;

   // private members (method specific)

   double ActivationFnc(double x) const;
   double OutputActivationFnc(double x) const;

   double fWeightMatrix0to1[16][11];   // weight matrix from layer 0 to 1
   double fWeightMatrix1to2[6][16];   // weight matrix from layer 1 to 2
   double fWeightMatrix2to3[1][6];   // weight matrix from layer 2 to 3

};

inline void ReadMLP3::Initialize()
{
   // build network structure
   // weight matrix from layer 0 to 1
   fWeightMatrix0to1[0][0] = -3.76302718347363;
   fWeightMatrix0to1[1][0] = 2.76309043057217;
   fWeightMatrix0to1[2][0] = -1.34026026775785;
   fWeightMatrix0to1[3][0] = 1.8761560683632;
   fWeightMatrix0to1[4][0] = 1.23678621505886;
   fWeightMatrix0to1[5][0] = 3.15706441412815;
   fWeightMatrix0to1[6][0] = -6.65575959951955;
   fWeightMatrix0to1[7][0] = 0.920515990577776;
   fWeightMatrix0to1[8][0] = -2.12445505691181;
   fWeightMatrix0to1[9][0] = 2.02874196298019;
   fWeightMatrix0to1[10][0] = -1.01548251061252;
   fWeightMatrix0to1[11][0] = 1.33036661576043;
   fWeightMatrix0to1[12][0] = -13.8316950492895;
   fWeightMatrix0to1[13][0] = -7.76256286921246;
   fWeightMatrix0to1[14][0] = -0.0179593216370127;
   fWeightMatrix0to1[0][1] = -0.0506451556385957;
   fWeightMatrix0to1[1][1] = -0.329751916899611;
   fWeightMatrix0to1[2][1] = -0.0583053357493271;
   fWeightMatrix0to1[3][1] = -0.0751047614511907;
   fWeightMatrix0to1[4][1] = -0.204339122555937;
   fWeightMatrix0to1[5][1] = -0.375275192142008;
   fWeightMatrix0to1[6][1] = 0.0559593262362215;
   fWeightMatrix0to1[7][1] = -0.00970831033624035;
   fWeightMatrix0to1[8][1] = 0.152889380565051;
   fWeightMatrix0to1[9][1] = -0.0339036523436312;
   fWeightMatrix0to1[10][1] = -0.30564102899912;
   fWeightMatrix0to1[11][1] = 0.0569453297735878;
   fWeightMatrix0to1[12][1] = -0.180012204574015;
   fWeightMatrix0to1[13][1] = 0.0209703913758209;
   fWeightMatrix0to1[14][1] = 0.558132969936572;
   fWeightMatrix0to1[0][2] = -1.2269202389039;
   fWeightMatrix0to1[1][2] = 7.30074043312776;
   fWeightMatrix0to1[2][2] = 3.97765424034823;
   fWeightMatrix0to1[3][2] = -0.450942384573869;
   fWeightMatrix0to1[4][2] = 2.74971012070372;
   fWeightMatrix0to1[5][2] = 2.31443719192783;
   fWeightMatrix0to1[6][2] = -0.193476017330809;
   fWeightMatrix0to1[7][2] = 0.124224391003527;
   fWeightMatrix0to1[8][2] = -4.56740048452015;
   fWeightMatrix0to1[9][2] = -0.570241735416975;
   fWeightMatrix0to1[10][2] = 0.796120740441043;
   fWeightMatrix0to1[11][2] = 0.716813918577822;
   fWeightMatrix0to1[12][2] = 0.0187980858542855;
   fWeightMatrix0to1[13][2] = 0.37495179021814;
   fWeightMatrix0to1[14][2] = 2.06397493088872;
   fWeightMatrix0to1[0][3] = -7.02716511616305;
   fWeightMatrix0to1[1][3] = 0.721533310820741;
   fWeightMatrix0to1[2][3] = -0.684286004387198;
   fWeightMatrix0to1[3][3] = 7.01306589909269;
   fWeightMatrix0to1[4][3] = 1.64189819121811;
   fWeightMatrix0to1[5][3] = 2.04464082847453;
   fWeightMatrix0to1[6][3] = 4.4137074187587;
   fWeightMatrix0to1[7][3] = 9.63256480959882;
   fWeightMatrix0to1[8][3] = 5.79868301389831;
   fWeightMatrix0to1[9][3] = -10.6516133002384;
   fWeightMatrix0to1[10][3] = -0.183349988318961;
   fWeightMatrix0to1[11][3] = -3.06914396914388;
   fWeightMatrix0to1[12][3] = 14.1290466067122;
   fWeightMatrix0to1[13][3] = 8.83646398989674;
   fWeightMatrix0to1[14][3] = -1.37108802880427;
   fWeightMatrix0to1[0][4] = 0.0290676318540917;
   fWeightMatrix0to1[1][4] = 0.257615729780747;
   fWeightMatrix0to1[2][4] = -0.21419348095235;
   fWeightMatrix0to1[3][4] = -0.0710882104991993;
   fWeightMatrix0to1[4][4] = -0.139482639606202;
   fWeightMatrix0to1[5][4] = 0.344754018215101;
   fWeightMatrix0to1[6][4] = -0.494925264452681;
   fWeightMatrix0to1[7][4] = 0.157636073733059;
   fWeightMatrix0to1[8][4] = -0.438626291573213;
   fWeightMatrix0to1[9][4] = -0.532878786115852;
   fWeightMatrix0to1[10][4] = -0.808190888567803;
   fWeightMatrix0to1[11][4] = -0.219258512954714;
   fWeightMatrix0to1[12][4] = 0.332663985467835;
   fWeightMatrix0to1[13][4] = 0.243124480697789;
   fWeightMatrix0to1[14][4] = -0.576047808962147;
   fWeightMatrix0to1[0][5] = 2.92337362802586;
   fWeightMatrix0to1[1][5] = -7.91384279989546;
   fWeightMatrix0to1[2][5] = -3.74251572718821;
   fWeightMatrix0to1[3][5] = 1.32784357327206;
   fWeightMatrix0to1[4][5] = 3.33060266390789;
   fWeightMatrix0to1[5][5] = 2.61142286670483;
   fWeightMatrix0to1[6][5] = 3.52940417042805;
   fWeightMatrix0to1[7][5] = 1.60438266153664;
   fWeightMatrix0to1[8][5] = -6.04508996115392;
   fWeightMatrix0to1[9][5] = 0.923764608336567;
   fWeightMatrix0to1[10][5] = -0.677675561133809;
   fWeightMatrix0to1[11][5] = 1.16075119265158;
   fWeightMatrix0to1[12][5] = -0.984962844741004;
   fWeightMatrix0to1[13][5] = 0.157758846354025;
   fWeightMatrix0to1[14][5] = -6.93440182368645;
   fWeightMatrix0to1[0][6] = 8.9740885254242;
   fWeightMatrix0to1[1][6] = -2.33892487909501;
   fWeightMatrix0to1[2][6] = 3.94486203339761;
   fWeightMatrix0to1[3][6] = -9.90804918030876;
   fWeightMatrix0to1[4][6] = 0.772088165903746;
   fWeightMatrix0to1[5][6] = -2.23140888361453;
   fWeightMatrix0to1[6][6] = -3.97904668839296;
   fWeightMatrix0to1[7][6] = -11.2121012253947;
   fWeightMatrix0to1[8][6] = -0.648014819769837;
   fWeightMatrix0to1[9][6] = -3.03226584576353;
   fWeightMatrix0to1[10][6] = -1.05822926094407;
   fWeightMatrix0to1[11][6] = -1.40166725732611;
   fWeightMatrix0to1[12][6] = -0.429143382444112;
   fWeightMatrix0to1[13][6] = 0.783353667605717;
   fWeightMatrix0to1[14][6] = 1.10253366154095;
   fWeightMatrix0to1[0][7] = -0.00096354966711632;
   fWeightMatrix0to1[1][7] = 0.0207449615477115;
   fWeightMatrix0to1[2][7] = 0.168760417575375;
   fWeightMatrix0to1[3][7] = 0.104626345224608;
   fWeightMatrix0to1[4][7] = 0.443613333456985;
   fWeightMatrix0to1[5][7] = -0.103698330115927;
   fWeightMatrix0to1[6][7] = 0.509686122090842;
   fWeightMatrix0to1[7][7] = -0.0847962835073881;
   fWeightMatrix0to1[8][7] = 0.10900949760941;
   fWeightMatrix0to1[9][7] = 0.588400545254814;
   fWeightMatrix0to1[10][7] = 0.955425523857385;
   fWeightMatrix0to1[11][7] = -0.0738224636809057;
   fWeightMatrix0to1[12][7] = -0.167538988661763;
   fWeightMatrix0to1[13][7] = -0.182631080123618;
   fWeightMatrix0to1[14][7] = 0.0725466099276639;
   fWeightMatrix0to1[0][8] = -1.89195404366154;
   fWeightMatrix0to1[1][8] = -5.62617010394504;
   fWeightMatrix0to1[2][8] = -5.56766957542;
   fWeightMatrix0to1[3][8] = -0.894085542401951;
   fWeightMatrix0to1[4][8] = 2.61797327378272;
   fWeightMatrix0to1[5][8] = -2.04733221150474;
   fWeightMatrix0to1[6][8] = -2.13625837183877;
   fWeightMatrix0to1[7][8] = -1.58048543120192;
   fWeightMatrix0to1[8][8] = 2.45206356192833;
   fWeightMatrix0to1[9][8] = -0.589014224440378;
   fWeightMatrix0to1[10][8] = -0.334503611130018;
   fWeightMatrix0to1[11][8] = -2.34918837687288;
   fWeightMatrix0to1[12][8] = 0.96408258546533;
   fWeightMatrix0to1[13][8] = -0.40748787944357;
   fWeightMatrix0to1[14][8] = -9.47450201009571;
   fWeightMatrix0to1[0][9] = 20.8609438589541;
   fWeightMatrix0to1[1][9] = 15.2112977842345;
   fWeightMatrix0to1[2][9] = -18.007611866975;
   fWeightMatrix0to1[3][9] = 16.7869721841481;
   fWeightMatrix0to1[4][9] = 2.94500336300193;
   fWeightMatrix0to1[5][9] = 14.3169403947433;
   fWeightMatrix0to1[6][9] = -9.73385734535996;
   fWeightMatrix0to1[7][9] = -8.67139207070635;
   fWeightMatrix0to1[8][9] = 0.712666900476039;
   fWeightMatrix0to1[9][9] = -3.83406975120738;
   fWeightMatrix0to1[10][9] = 2.51722476355696;
   fWeightMatrix0to1[11][9] = -0.163225631718445;
   fWeightMatrix0to1[12][9] = -2.51567015648198;
   fWeightMatrix0to1[13][9] = 2.89925812167918;
   fWeightMatrix0to1[14][9] = 4.58414504695329;
   fWeightMatrix0to1[0][10] = -18.1479687404045;
   fWeightMatrix0to1[1][10] = -6.87547998017515;
   fWeightMatrix0to1[2][10] = 12.0303072744653;
   fWeightMatrix0to1[3][10] = -13.6517988725489;
   fWeightMatrix0to1[4][10] = 2.99845920317791;
   fWeightMatrix0to1[5][10] = -7.7558720396997;
   fWeightMatrix0to1[6][10] = 2.16287689461008;
   fWeightMatrix0to1[7][10] = 9.48741808047751;
   fWeightMatrix0to1[8][10] = 4.01076374660936;
   fWeightMatrix0to1[9][10] = -4.4097050665931;
   fWeightMatrix0to1[10][10] = 3.07130885114297;
   fWeightMatrix0to1[11][10] = 1.43449143427257;
   fWeightMatrix0to1[12][10] = 2.73800297635727;
   fWeightMatrix0to1[13][10] = -4.12868285849065;
   fWeightMatrix0to1[14][10] = -2.07928311378927;
   // weight matrix from layer 1 to 2
   fWeightMatrix1to2[0][0] = -1.31543607831217;
   fWeightMatrix1to2[1][0] = 0.791403615664005;
   fWeightMatrix1to2[2][0] = 1.04168605950246;
   fWeightMatrix1to2[3][0] = -1.5085267134201;
   fWeightMatrix1to2[4][0] = 0.613283070111226;
   fWeightMatrix1to2[0][1] = 2.44841351943023;
   fWeightMatrix1to2[1][1] = 0.551832288144123;
   fWeightMatrix1to2[2][1] = 0.982992895129377;
   fWeightMatrix1to2[3][1] = 0.389186579474565;
   fWeightMatrix1to2[4][1] = 4.0077663039616;
   fWeightMatrix1to2[0][2] = -0.511810296405633;
   fWeightMatrix1to2[1][2] = -0.684909496216586;
   fWeightMatrix1to2[2][2] = -1.4380430691083;
   fWeightMatrix1to2[3][2] = -0.48681146680595;
   fWeightMatrix1to2[4][2] = -7.07632454109452;
   fWeightMatrix1to2[0][3] = 2.27421240683317;
   fWeightMatrix1to2[1][3] = 3.2746531105104;
   fWeightMatrix1to2[2][3] = 1.20809901097749;
   fWeightMatrix1to2[3][3] = 0.751922064775207;
   fWeightMatrix1to2[4][3] = 0.438219933301886;
   fWeightMatrix1to2[0][4] = 3.65361272257747;
   fWeightMatrix1to2[1][4] = 0.713333388896416;
   fWeightMatrix1to2[2][4] = 0.6639581133904;
   fWeightMatrix1to2[3][4] = 1.85385917718205;
   fWeightMatrix1to2[4][4] = -0.812353305229154;
   fWeightMatrix1to2[0][5] = 3.50140754371239;
   fWeightMatrix1to2[1][5] = 0.755088187341057;
   fWeightMatrix1to2[2][5] = 1.44590497452416;
   fWeightMatrix1to2[3][5] = 1.2644272623524;
   fWeightMatrix1to2[4][5] = -1.03675379312309;
   fWeightMatrix1to2[0][6] = -2.8440977653202;
   fWeightMatrix1to2[1][6] = -0.896910980339466;
   fWeightMatrix1to2[2][6] = -1.0117064245726;
   fWeightMatrix1to2[3][6] = -1.12668435417018;
   fWeightMatrix1to2[4][6] = 0.50395212713803;
   fWeightMatrix1to2[0][7] = -2.652329735748;
   fWeightMatrix1to2[1][7] = 0.459517787454805;
   fWeightMatrix1to2[2][7] = -0.0407274853719853;
   fWeightMatrix1to2[3][7] = -0.83727206473281;
   fWeightMatrix1to2[4][7] = -0.564906652995487;
   fWeightMatrix1to2[0][8] = 2.69241073087366;
   fWeightMatrix1to2[1][8] = 1.0585552476388;
   fWeightMatrix1to2[2][8] = 0.756639806203475;
   fWeightMatrix1to2[3][8] = 2.17074817446888;
   fWeightMatrix1to2[4][8] = -0.93581025281211;
   fWeightMatrix1to2[0][9] = 0.815056549066966;
   fWeightMatrix1to2[1][9] = 0.762702938633443;
   fWeightMatrix1to2[2][9] = 1.31625700828215;
   fWeightMatrix1to2[3][9] = -0.298902707267784;
   fWeightMatrix1to2[4][9] = 5.60812416038557;
   fWeightMatrix1to2[0][10] = -0.501672456274216;
   fWeightMatrix1to2[1][10] = 2.92448297729023;
   fWeightMatrix1to2[2][10] = 1.03883979351141;
   fWeightMatrix1to2[3][10] = 2.7282898208996;
   fWeightMatrix1to2[4][10] = -5.59839567315629;
   fWeightMatrix1to2[0][11] = -0.653173603286946;
   fWeightMatrix1to2[1][11] = -0.78848199199859;
   fWeightMatrix1to2[2][11] = 0.357439212746649;
   fWeightMatrix1to2[3][11] = 2.01344160207623;
   fWeightMatrix1to2[4][11] = -1.82060081214253;
   fWeightMatrix1to2[0][12] = -9.0495867655589;
   fWeightMatrix1to2[1][12] = -1.49089053577542;
   fWeightMatrix1to2[2][12] = -1.63091479579701;
   fWeightMatrix1to2[3][12] = -4.55971858229536;
   fWeightMatrix1to2[4][12] = 1.44161650775935;
   fWeightMatrix1to2[0][13] = 0.042420035273723;
   fWeightMatrix1to2[1][13] = 0.976688140496162;
   fWeightMatrix1to2[2][13] = 0.178111288905854;
   fWeightMatrix1to2[3][13] = 4.04011196787293;
   fWeightMatrix1to2[4][13] = 2.60570920716231;
   fWeightMatrix1to2[0][14] = 0.382002209904901;
   fWeightMatrix1to2[1][14] = 0.336599544242579;
   fWeightMatrix1to2[2][14] = 0.978780305973004;
   fWeightMatrix1to2[3][14] = 0.0961378704901452;
   fWeightMatrix1to2[4][14] = -0.231654629667219;
   fWeightMatrix1to2[0][15] = -3.78204610775016;
   fWeightMatrix1to2[1][15] = 2.35308744021906;
   fWeightMatrix1to2[2][15] = -0.880768439567895;
   fWeightMatrix1to2[3][15] = -0.957149744220995;
   fWeightMatrix1to2[4][15] = -5.77922758099185;
   // weight matrix from layer 2 to 3
   fWeightMatrix2to3[0][0] = 0.507003570035785;
   fWeightMatrix2to3[0][1] = -2.03662074494049;
   fWeightMatrix2to3[0][2] = -1.62860195341784;
   fWeightMatrix2to3[0][3] = 0.786290377447757;
   fWeightMatrix2to3[0][4] = -1.83172049402648;
   fWeightMatrix2to3[0][5] = 0.475910066713424;
}

inline double ReadMLP3::GetMvaValue__( const std::vector<double>& inputValues ) const
{
   if (inputValues.size() != (unsigned int)10) {
      std::cout << "Input vector needs to be of size " << 10 << std::endl;
      return 0;
   }

   std::array<double, 16> fWeights1 {{}};
   std::array<double, 6> fWeights2 {{}};
   std::array<double, 1> fWeights3 {{}};
   fWeights1.back() = 1.;
   fWeights2.back() = 1.;

   // layer 0 to 1
   for (int o=0; o<15; o++) {
      std::array<double, 11> buffer; // no need to initialise
      for (int i = 0; i<11 - 1; i++) {
         buffer[i] = fWeightMatrix0to1[o][i] * inputValues[i];
      } // loop over i
      buffer.back() = fWeightMatrix0to1[o][10];      for (int i=0; i<11; i++) {
         fWeights1[o] += buffer[i];
      } // loop over i
    } // loop over o
   for (int o=0; o<15; o++) {
      fWeights1[o] = ActivationFnc(fWeights1[o]);
   } // loop over o
   // layer 1 to 2
   for (int o=0; o<5; o++) {
      std::array<double, 16> buffer; // no need to initialise
      for (int i=0; i<16; i++) {
         buffer[i] = fWeightMatrix1to2[o][i] * fWeights1[i];
      } // loop over i
      for (int i=0; i<16; i++) {
         fWeights2[o] += buffer[i];
      } // loop over i
    } // loop over o
   for (int o=0; o<5; o++) {
      fWeights2[o] = ActivationFnc(fWeights2[o]);
   } // loop over o
   // layer 2 to 3
   for (int o=0; o<1; o++) {
      std::array<double, 6> buffer; // no need to initialise
      for (int i=0; i<6; i++) {
         buffer[i] = fWeightMatrix2to3[o][i] * fWeights2[i];
      } // loop over i
      for (int i=0; i<6; i++) {
         fWeights3[o] += buffer[i];
      } // loop over i
    } // loop over o
   for (int o=0; o<1; o++) {
      fWeights3[o] = OutputActivationFnc(fWeights3[o]);
   } // loop over o

   return fWeights3[0];
}

inline double ReadMLP3::ActivationFnc(double x) const {
   // fast hyperbolic tan approximation
   if (x > 4.97) return 1;
   if (x < -4.97) return -1;
   float x2 = x * x;
   float a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
   float b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
   return a / b;
}
inline double ReadMLP3::OutputActivationFnc(double x) const {
   // sigmoid
   return 1.0/(1.0+exp(-x));
}

// Clean up
inline void ReadMLP3::Clear()
{
}
   inline double ReadMLP3::GetMvaValue( const std::vector<double>& inputValues ) const
   {
      // classifier response value
      double retval = 0;

      // classifier response, sanity check first
      if (!IsStatusClean()) {
         std::cout << "Problem in class \"" << fClassName << "\": cannot return classifier response"
                   << " because status is dirty" << std::endl;
         retval = 0;
      }
      else {
            std::vector<double> iV(inputValues);
            Transform( iV, -1 );
            retval = GetMvaValue__( iV );
      }

      return retval;
   }

//_______________________________________________________________________
inline void ReadMLP3::InitTransform_1()
{
   double fMin_1[3][10];
   double fMax_1[3][10];
   // Normalization transformation, initialisation
   fMin_1[0][0] = 30.2120780945;
   fMax_1[0][0] = 825.274047852;
   fScal_1[0][0] = 2.0/(fMax_1[0][0]-fMin_1[0][0]);
   fOff_1[0][0] = fMin_1[0][0]*fScal_1[0][0]+1.;
   fMin_1[1][0] = 30.2008743286;
   fMax_1[1][0] = 825.274047852;
   fScal_1[1][0] = 2.0/(fMax_1[1][0]-fMin_1[1][0]);
   fOff_1[1][0] = fMin_1[1][0]*fScal_1[1][0]+1.;
   fMin_1[2][0] = 30.2008743286;
   fMax_1[2][0] = 825.274047852;
   fScal_1[2][0] = 2.0/(fMax_1[2][0]-fMin_1[2][0]);
   fOff_1[2][0] = fMin_1[2][0]*fScal_1[2][0]+1.;
   fMin_1[0][1] = -3.14158201218;
   fMax_1[0][1] = 3.14147925377;
   fScal_1[0][1] = 2.0/(fMax_1[0][1]-fMin_1[0][1]);
   fOff_1[0][1] = fMin_1[0][1]*fScal_1[0][1]+1.;
   fMin_1[1][1] = -3.14158010483;
   fMax_1[1][1] = 3.14147925377;
   fScal_1[1][1] = 2.0/(fMax_1[1][1]-fMin_1[1][1]);
   fOff_1[1][1] = fMin_1[1][1]*fScal_1[1][1]+1.;
   fMin_1[2][1] = -3.14158201218;
   fMax_1[2][1] = 3.14147925377;
   fScal_1[2][1] = 2.0/(fMax_1[2][1]-fMin_1[2][1]);
   fOff_1[2][1] = fMin_1[2][1]*fScal_1[2][1]+1.;
   fMin_1[0][2] = -1804.5;
   fMax_1[0][2] = 1804.5;
   fScal_1[0][2] = 2.0/(fMax_1[0][2]-fMin_1[0][2]);
   fOff_1[0][2] = fMin_1[0][2]*fScal_1[0][2]+1.;
   fMin_1[1][2] = -1804.5;
   fMax_1[1][2] = 1804.5;
   fScal_1[1][2] = 2.0/(fMax_1[1][2]-fMin_1[1][2]);
   fOff_1[1][2] = fMin_1[1][2]*fScal_1[1][2]+1.;
   fMin_1[2][2] = -1804.5;
   fMax_1[2][2] = 1804.5;
   fScal_1[2][2] = 2.0/(fMax_1[2][2]-fMin_1[2][2]);
   fOff_1[2][2] = fMin_1[2][2]*fScal_1[2][2]+1.;
   fMin_1[0][3] = 34.4729690552;
   fMax_1[0][3] = 942.453063965;
   fScal_1[0][3] = 2.0/(fMax_1[0][3]-fMin_1[0][3]);
   fOff_1[0][3] = fMin_1[0][3]*fScal_1[0][3]+1.;
   fMin_1[1][3] = 30.2085323334;
   fMax_1[1][3] = 942.453063965;
   fScal_1[1][3] = 2.0/(fMax_1[1][3]-fMin_1[1][3]);
   fOff_1[1][3] = fMin_1[1][3]*fScal_1[1][3]+1.;
   fMin_1[2][3] = 30.2085323334;
   fMax_1[2][3] = 942.453063965;
   fScal_1[2][3] = 2.0/(fMax_1[2][3]-fMin_1[2][3]);
   fOff_1[2][3] = fMin_1[2][3]*fScal_1[2][3]+1.;
   fMin_1[0][4] = -3.1415772438;
   fMax_1[0][4] = 3.14154338837;
   fScal_1[0][4] = 2.0/(fMax_1[0][4]-fMin_1[0][4]);
   fOff_1[0][4] = fMin_1[0][4]*fScal_1[0][4]+1.;
   fMin_1[1][4] = -3.1415772438;
   fMax_1[1][4] = 3.14143395424;
   fScal_1[1][4] = 2.0/(fMax_1[1][4]-fMin_1[1][4]);
   fOff_1[1][4] = fMin_1[1][4]*fScal_1[1][4]+1.;
   fMin_1[2][4] = -3.1415772438;
   fMax_1[2][4] = 3.14154338837;
   fScal_1[2][4] = 2.0/(fMax_1[2][4]-fMin_1[2][4]);
   fOff_1[2][4] = fMin_1[2][4]*fScal_1[2][4]+1.;
   fMin_1[0][5] = -2154.5;
   fMax_1[0][5] = 2154.5;
   fScal_1[0][5] = 2.0/(fMax_1[0][5]-fMin_1[0][5]);
   fOff_1[0][5] = fMin_1[0][5]*fScal_1[0][5]+1.;
   fMin_1[1][5] = -2154.5;
   fMax_1[1][5] = 2154.5;
   fScal_1[1][5] = 2.0/(fMax_1[1][5]-fMin_1[1][5]);
   fOff_1[1][5] = fMin_1[1][5]*fScal_1[1][5]+1.;
   fMin_1[2][5] = -2154.5;
   fMax_1[2][5] = 2154.5;
   fScal_1[2][5] = 2.0/(fMax_1[2][5]-fMin_1[2][5]);
   fOff_1[2][5] = fMin_1[2][5]*fScal_1[2][5]+1.;
   fMin_1[0][6] = 30.8757247925;
   fMax_1[0][6] = 1022.02819824;
   fScal_1[0][6] = 2.0/(fMax_1[0][6]-fMin_1[0][6]);
   fOff_1[0][6] = fMin_1[0][6]*fScal_1[0][6]+1.;
   fMin_1[1][6] = 30.4136562347;
   fMax_1[1][6] = 1019.2333374;
   fScal_1[1][6] = 2.0/(fMax_1[1][6]-fMin_1[1][6]);
   fOff_1[1][6] = fMin_1[1][6]*fScal_1[1][6]+1.;
   fMin_1[2][6] = 30.4136562347;
   fMax_1[2][6] = 1022.02819824;
   fScal_1[2][6] = 2.0/(fMax_1[2][6]-fMin_1[2][6]);
   fOff_1[2][6] = fMin_1[2][6]*fScal_1[2][6]+1.;
   fMin_1[0][7] = -3.14158201218;
   fMax_1[0][7] = 3.1414809227;
   fScal_1[0][7] = 2.0/(fMax_1[0][7]-fMin_1[0][7]);
   fOff_1[0][7] = fMin_1[0][7]*fScal_1[0][7]+1.;
   fMin_1[1][7] = -3.14155745506;
   fMax_1[1][7] = 3.14154338837;
   fScal_1[1][7] = 2.0/(fMax_1[1][7]-fMin_1[1][7]);
   fOff_1[1][7] = fMin_1[1][7]*fScal_1[1][7]+1.;
   fMin_1[2][7] = -3.14158201218;
   fMax_1[2][7] = 3.14154338837;
   fScal_1[2][7] = 2.0/(fMax_1[2][7]-fMin_1[2][7]);
   fOff_1[2][7] = fMin_1[2][7]*fScal_1[2][7]+1.;
   fMin_1[0][8] = -2554.5;
   fMax_1[0][8] = 2554.5;
   fScal_1[0][8] = 2.0/(fMax_1[0][8]-fMin_1[0][8]);
   fOff_1[0][8] = fMin_1[0][8]*fScal_1[0][8]+1.;
   fMin_1[1][8] = -2554.5;
   fMax_1[1][8] = 2554.5;
   fScal_1[1][8] = 2.0/(fMax_1[1][8]-fMin_1[1][8]);
   fOff_1[1][8] = fMin_1[1][8]*fScal_1[1][8]+1.;
   fMin_1[2][8] = -2554.5;
   fMax_1[2][8] = 2554.5;
   fScal_1[2][8] = 2.0/(fMax_1[2][8]-fMin_1[2][8]);
   fOff_1[2][8] = fMin_1[2][8]*fScal_1[2][8]+1.;
   fMin_1[0][9] = -31.1916236877;
   fMax_1[0][9] = 6.28247213364;
   fScal_1[0][9] = 2.0/(fMax_1[0][9]-fMin_1[0][9]);
   fOff_1[0][9] = fMin_1[0][9]*fScal_1[0][9]+1.;
   fMin_1[1][9] = -7.99729824066;
   fMax_1[1][9] = 6.40001583099;
   fScal_1[1][9] = 2.0/(fMax_1[1][9]-fMin_1[1][9]);
   fOff_1[1][9] = fMin_1[1][9]*fScal_1[1][9]+1.;
   fMin_1[2][9] = -31.1916236877;
   fMax_1[2][9] = 6.40001583099;
   fScal_1[2][9] = 2.0/(fMax_1[2][9]-fMin_1[2][9]);
   fOff_1[2][9] = fMin_1[2][9]*fScal_1[2][9]+1.;
}

//_______________________________________________________________________
inline void ReadMLP3::Transform_1( std::vector<double>& iv, int cls) const
{
   // Normalization transformation
   if (cls < 0 || cls > 2) {
   if (2 > 1 ) cls = 2;
      else cls = 2;
   }
   const int nVar = 10;

   // get indices of used variables

   // define the indices of the variables which are transformed by this transformation
   static std::vector<int> indicesGet;
   static std::vector<int> indicesPut;

   if ( indicesGet.empty() ) {
      indicesGet.reserve(fNvars);
      indicesGet.push_back( 0);
      indicesGet.push_back( 1);
      indicesGet.push_back( 2);
      indicesGet.push_back( 3);
      indicesGet.push_back( 4);
      indicesGet.push_back( 5);
      indicesGet.push_back( 6);
      indicesGet.push_back( 7);
      indicesGet.push_back( 8);
      indicesGet.push_back( 9);
   }
   if ( indicesPut.empty() ) {
      indicesPut.reserve(fNvars);
      indicesPut.push_back( 0);
      indicesPut.push_back( 1);
      indicesPut.push_back( 2);
      indicesPut.push_back( 3);
      indicesPut.push_back( 4);
      indicesPut.push_back( 5);
      indicesPut.push_back( 6);
      indicesPut.push_back( 7);
      indicesPut.push_back( 8);
      indicesPut.push_back( 9);
   }

   std::vector<double> dv;
   dv.resize(nVar);
   for (int ivar=0; ivar<nVar; ivar++) dv[ivar] = iv[indicesGet.at(ivar)];
   for (int ivar=0;ivar<10;ivar++) {
      double offset = fOff_1[cls][ivar];
      double scale  = fScal_1[cls][ivar];
      iv[indicesPut.at(ivar)] = scale*dv[ivar]-offset;
   }
}

//_______________________________________________________________________
inline void ReadMLP3::InitTransform()
{
   InitTransform_1();
}

//_______________________________________________________________________
inline void ReadMLP3::Transform( std::vector<double>& iv, int sigOrBgd ) const
{
   Transform_1( iv, sigOrBgd );
}
#endif
