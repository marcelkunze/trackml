#ifndef TMVAClassification_MLP3_H
#define TMVAClassification_MLP3_H
// Class: ReadMLP3
// Automatically generated by MethodBase::MakeClass
//

/* configuration options =====================================================

#GEN -*-*-*-*-*-*-*-*-*-*-*- general info -*-*-*-*-*-*-*-*-*-*-*-

Method         : MLP::MLP3
TMVA Release   : 4.2.1         [262657]
ROOT Release   : 6.16/00       [397312]
Creator        : marcel
Date           : Tue Jun  4 13:42:02 2019
Host           : Linux SFT-ubuntu-1804-3 4.15.0-38-generic #41-Ubuntu SMP Wed Oct 10 10:59:38 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
Dir            : /home/marcel/workspace/trackml/macro
Training events: 1700000
Analysis type  : [Classification]


#OPT -*-*-*-*-*-*-*-*-*-*-*-*- options -*-*-*-*-*-*-*-*-*-*-*-*-

# Set by User:
NCycles: "500" [Number of training cycles]
HiddenLayers: "15,5" [Specification of hidden layer architecture]
NeuronType: "tanh" [Neuron activation function type]
V: "False" [Verbose output (short form of "VerbosityLevel" below - overrides the latter one)]
VarTransform: "N" [List of variable transformations performed before training, e.g., "D_Background,P_Signal,G,N_AllClasses" for: "Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)"]
H: "False" [Print method-specific help message]
TestRate: "5" [Test for overtraining performed at each #th epochs]
UseRegulator: "False" [Use regulator to avoid over-training]
# Default:
RandomSeed: "1" [Random seed for initial synapse weights (0 means unique seed for each run; default value '1')]
EstimatorType: "CE" [MSE (Mean Square Estimator) for Gaussian Likelihood or CE(Cross-Entropy) for Bernoulli Likelihood]
NeuronInputType: "sum" [Neuron input function type]
VerbosityLevel: "Default" [Verbosity level]
CreateMVAPdfs: "False" [Create PDFs for classifier outputs (signal and background)]
IgnoreNegWeightsInTraining: "False" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]
TrainingMethod: "BP" [Train with Back-Propagation (BP), BFGS Algorithm (BFGS), or Genetic Algorithm (GA - slower and worse)]
LearningRate: "2.000000e-02" [ANN learning rate parameter]
DecayRate: "1.000000e-02" [Decay rate for learning parameter]
EpochMonitoring: "False" [Provide epoch-wise monitoring plots according to TestRate (caution: causes big ROOT output file!)]
Sampling: "1.000000e+00" [Only 'Sampling' (randomly selected) events are trained each epoch]
SamplingEpoch: "1.000000e+00" [Sampling is used for the first 'SamplingEpoch' epochs, afterwards, all events are taken for training]
SamplingImportance: "1.000000e+00" [ The sampling weights of events in epochs which successful (worse estimator than before) are multiplied with SamplingImportance, else they are divided.]
SamplingTraining: "True" [The training sample is sampled]
SamplingTesting: "False" [The testing sample is sampled]
ResetStep: "50" [How often BFGS should reset history]
Tau: "3.000000e+00" [LineSearch "size step"]
BPMode: "sequential" [Back-propagation learning mode: sequential or batch]
BatchSize: "-1" [Batch size: number of events/batch, only set if in Batch Mode, -1 for BatchSize=number_of_events]
ConvergenceImprove: "1.000000e-30" [Minimum improvement which counts as improvement (<0 means automatic convergence check is turned off)]
ConvergenceTests: "-1" [Number of steps (without improvement) required for convergence (<0 means automatic convergence check is turned off)]
UpdateLimit: "10000" [Maximum times of regulator update]
CalculateErrors: "False" [Calculates inverse Hessian matrix at the end of the training to be able to calculate the uncertainties of an MVA value]
WeightRange: "1.000000e+00" [Take the events for the estimator calculations from small deviations from the desired value to large deviations only over the weight range]
##


#VAR -*-*-*-*-*-*-*-*-*-*-*-* variables *-*-*-*-*-*-*-*-*-*-*-*-

NVar 10
rz1                           rz1                           rz1                           rz1                                                             'F'    [30.2008743286,825.29473877]
phi1                          phi1                          phi1                          phi1                                                            'F'    [-3.14158201218,3.14154338837]
z1                            z1                            z1                            z1                                                              'F'    [-1804.5,1804.5]
rz2                           rz2                           rz2                           rz2                                                             'F'    [30.2568588257,1017.16442871]
phi2                          phi2                          phi2                          phi2                                                            'F'    [-3.14158201218,3.14154338837]
z2                            z2                            z2                            z2                                                              'F'    [-2154.5,2154.5]
rz3                           rz3                           rz3                           rz3                                                             'F'    [30.0867195129,1022.9755249]
phi3                          phi3                          phi3                          phi3                                                            'F'    [-3.14158201218,3.14157223701]
z3                            z3                            z3                            z3                                                              'F'    [-2554.5,2554.5]
log(score)                    log_score_                    log(score)                    log(score)                                                      'F'    [-31.1916236877,6.40648078918]
NSpec 0


============================================================================ */

#include <array>
#include <vector>
#include <cmath>
#include <string>
#include <iostream>

#ifndef IClassifierReader__def
#define IClassifierReader__def

class IClassifierReader {

 public:

   // constructor
   IClassifierReader() : fStatusIsClean( true ) {}
   virtual ~IClassifierReader() {}

   // return classifier response
   virtual double GetMvaValue( const std::vector<double>& inputValues ) const = 0;

   // returns classifier status
   bool IsStatusClean() const { return fStatusIsClean; }

 protected:

   bool fStatusIsClean;
};

#endif

class ReadMLP3 : public IClassifierReader {

 public:

   // constructor
   ReadMLP3( std::vector<std::string>& theInputVars )
      : IClassifierReader(),
        fClassName( "ReadMLP3" ),
        fNvars( 10 )
   {
      // the training input variables
      const char* inputVars[] = { "rz1", "phi1", "z1", "rz2", "phi2", "z2", "rz3", "phi3", "z3", "log(score)" };

      // sanity checks
      if (theInputVars.size() <= 0) {
         std::cout << "Problem in class \"" << fClassName << "\": empty input vector" << std::endl;
         fStatusIsClean = false;
      }

      if (theInputVars.size() != fNvars) {
         std::cout << "Problem in class \"" << fClassName << "\": mismatch in number of input values: "
                   << theInputVars.size() << " != " << fNvars << std::endl;
         fStatusIsClean = false;
      }

      // validate input variables
      for (size_t ivar = 0; ivar < theInputVars.size(); ivar++) {
         if (theInputVars[ivar] != inputVars[ivar]) {
            std::cout << "Problem in class \"" << fClassName << "\": mismatch in input variable names" << std::endl
                      << " for variable [" << ivar << "]: " << theInputVars[ivar].c_str() << " != " << inputVars[ivar] << std::endl;
            fStatusIsClean = false;
         }
      }

      // initialize min and max vectors (for normalisation)
      fVmin[0] = -1;
      fVmax[0] = 0.99999988079071;
      fVmin[1] = -1;
      fVmax[1] = 1;
      fVmin[2] = -1;
      fVmax[2] = 0.99999988079071;
      fVmin[3] = -1;
      fVmax[3] = 0.99999988079071;
      fVmin[4] = -1;
      fVmax[4] = 1;
      fVmin[5] = -1;
      fVmax[5] = 1;
      fVmin[6] = -1;
      fVmax[6] = 1;
      fVmin[7] = -1;
      fVmax[7] = 1;
      fVmin[8] = -1;
      fVmax[8] = 1;
      fVmin[9] = -1;
      fVmax[9] = 1;

      // initialize input variable types
      fType[0] = 'F';
      fType[1] = 'F';
      fType[2] = 'F';
      fType[3] = 'F';
      fType[4] = 'F';
      fType[5] = 'F';
      fType[6] = 'F';
      fType[7] = 'F';
      fType[8] = 'F';
      fType[9] = 'F';

      // initialize constants
      Initialize();

      // initialize transformation
      InitTransform();
   }

   // destructor
   virtual ~ReadMLP3() {
      Clear(); // method-specific
   }

   // the classifier response
   // "inputValues" is a vector of input values in the same order as the
   // variables given to the constructor
   double GetMvaValue( const std::vector<double>& inputValues ) const override;

 private:

   // method-specific destructor
   void Clear();

   // input variable transformation

   double fOff_1[3][10];
   double fScal_1[3][10];
   void InitTransform_1();
   void Transform_1( std::vector<double> & iv, int sigOrBgd ) const;
   void InitTransform();
   void Transform( std::vector<double> & iv, int sigOrBgd ) const;

   // common member variables
   const char* fClassName;

   const size_t fNvars;
   size_t GetNvar()           const { return fNvars; }
   char   GetType( int ivar ) const { return fType[ivar]; }

   // normalisation of input variables
   double fVmin[10];
   double fVmax[10];
   double NormVariable( double x, double xmin, double xmax ) const {
      // normalise to output range: [-1, 1]
      return 2*(x - xmin)/(xmax - xmin) - 1.0;
   }

   // type of input variable: 'F' or 'I'
   char   fType[10];

   // initialize internal variables
   void Initialize();
   double GetMvaValue__( const std::vector<double>& inputValues ) const;

   // private members (method specific)

   double ActivationFnc(double x) const;
   double OutputActivationFnc(double x) const;

   double fWeightMatrix0to1[16][11];   // weight matrix from layer 0 to 1
   double fWeightMatrix1to2[6][16];   // weight matrix from layer 1 to 2
   double fWeightMatrix2to3[1][6];   // weight matrix from layer 2 to 3

};

inline void ReadMLP3::Initialize()
{
   // build network structure
   // weight matrix from layer 0 to 1
   fWeightMatrix0to1[0][0] = -6.06956668966016;
   fWeightMatrix0to1[1][0] = -1.58626215571963;
   fWeightMatrix0to1[2][0] = -1.0863470272559;
   fWeightMatrix0to1[3][0] = -0.927900549714538;
   fWeightMatrix0to1[4][0] = -6.48351638439383;
   fWeightMatrix0to1[5][0] = -1.50792599455233;
   fWeightMatrix0to1[6][0] = -13.2905769778519;
   fWeightMatrix0to1[7][0] = -3.60028614900818;
   fWeightMatrix0to1[8][0] = -20.6253907473091;
   fWeightMatrix0to1[9][0] = -21.5382146113159;
   fWeightMatrix0to1[10][0] = -3.78226957359163;
   fWeightMatrix0to1[11][0] = -4.95952999657677;
   fWeightMatrix0to1[12][0] = 10.084670116807;
   fWeightMatrix0to1[13][0] = -2.70187865053833;
   fWeightMatrix0to1[14][0] = 2.7400344444265;
   fWeightMatrix0to1[0][1] = -0.241337371005277;
   fWeightMatrix0to1[1][1] = 0.139922104853762;
   fWeightMatrix0to1[2][1] = 0.00247820420489677;
   fWeightMatrix0to1[3][1] = -0.0539165414801826;
   fWeightMatrix0to1[4][1] = -0.041062680104581;
   fWeightMatrix0to1[5][1] = -0.0286935148531034;
   fWeightMatrix0to1[6][1] = -0.227174463833909;
   fWeightMatrix0to1[7][1] = -1.23839262747564;
   fWeightMatrix0to1[8][1] = 0.29847559988951;
   fWeightMatrix0to1[9][1] = -0.0818303490258106;
   fWeightMatrix0to1[10][1] = 0.0986199615585588;
   fWeightMatrix0to1[11][1] = -1.32190752054223;
   fWeightMatrix0to1[12][1] = -0.0208713102554133;
   fWeightMatrix0to1[13][1] = 0.438310033367945;
   fWeightMatrix0to1[14][1] = 0.0902589485986436;
   fWeightMatrix0to1[0][2] = -6.02248436784909;
   fWeightMatrix0to1[1][2] = 0.852520385766522;
   fWeightMatrix0to1[2][2] = -2.07935512283955;
   fWeightMatrix0to1[3][2] = -0.521530052985146;
   fWeightMatrix0to1[4][2] = -15.2538986784844;
   fWeightMatrix0to1[5][2] = -8.96775403040334;
   fWeightMatrix0to1[6][2] = 14.327197032129;
   fWeightMatrix0to1[7][2] = 0.00528657355563305;
   fWeightMatrix0to1[8][2] = -10.5752096294738;
   fWeightMatrix0to1[9][2] = 5.02869315327333;
   fWeightMatrix0to1[10][2] = 2.92597056530028;
   fWeightMatrix0to1[11][2] = -5.64046933957328;
   fWeightMatrix0to1[12][2] = 3.4637070851852;
   fWeightMatrix0to1[13][2] = 0.559698715643054;
   fWeightMatrix0to1[14][2] = 3.98439486484954;
   fWeightMatrix0to1[0][3] = -7.54714103090322;
   fWeightMatrix0to1[1][3] = -1.08118096870476;
   fWeightMatrix0to1[2][3] = 8.2357847679148;
   fWeightMatrix0to1[3][3] = 47.8476037873086;
   fWeightMatrix0to1[4][3] = 6.92842437532574;
   fWeightMatrix0to1[5][3] = 6.03383972407322;
   fWeightMatrix0to1[6][3] = 6.59485119508554;
   fWeightMatrix0to1[7][3] = -10.5975780058346;
   fWeightMatrix0to1[8][3] = 17.4586424745469;
   fWeightMatrix0to1[9][3] = 17.6563779709476;
   fWeightMatrix0to1[10][3] = 5.01276931518103;
   fWeightMatrix0to1[11][3] = -4.56860390206643;
   fWeightMatrix0to1[12][3] = -9.8489426040509;
   fWeightMatrix0to1[13][3] = 18.1841776586763;
   fWeightMatrix0to1[14][3] = -11.1101722200319;
   fWeightMatrix0to1[0][4] = 0.353014195336842;
   fWeightMatrix0to1[1][4] = -0.128069165797472;
   fWeightMatrix0to1[2][4] = -0.0595104720577435;
   fWeightMatrix0to1[3][4] = -0.0665231668042555;
   fWeightMatrix0to1[4][4] = -0.172603048158984;
   fWeightMatrix0to1[5][4] = -0.108558166605152;
   fWeightMatrix0to1[6][4] = -0.131164239774764;
   fWeightMatrix0to1[7][4] = 0.635602830842691;
   fWeightMatrix0to1[8][4] = 0.0489675700992509;
   fWeightMatrix0to1[9][4] = 0.108033823476253;
   fWeightMatrix0to1[10][4] = -0.0420145788790106;
   fWeightMatrix0to1[11][4] = 1.70198626953037;
   fWeightMatrix0to1[12][4] = 0.0400239183314456;
   fWeightMatrix0to1[13][4] = -1.01025752122933;
   fWeightMatrix0to1[14][4] = 0.0179185147548514;
   fWeightMatrix0to1[0][5] = 4.27641428011795;
   fWeightMatrix0to1[1][5] = 5.48050695073728;
   fWeightMatrix0to1[2][5] = 2.43685932496786;
   fWeightMatrix0to1[3][5] = -0.826385437341512;
   fWeightMatrix0to1[4][5] = -0.71431849685277;
   fWeightMatrix0to1[5][5] = 6.70102633860775;
   fWeightMatrix0to1[6][5] = -7.60989523737944;
   fWeightMatrix0to1[7][5] = 5.01944954810711;
   fWeightMatrix0to1[8][5] = -0.765895170052595;
   fWeightMatrix0to1[9][5] = 6.05058381036397;
   fWeightMatrix0to1[10][5] = -5.50717057144145;
   fWeightMatrix0to1[11][5] = 0.583373772669373;
   fWeightMatrix0to1[12][5] = -3.39970535728204;
   fWeightMatrix0to1[13][5] = 0.0946650411382312;
   fWeightMatrix0to1[14][5] = -2.26754844028045;
   fWeightMatrix0to1[0][6] = 9.54510785187059;
   fWeightMatrix0to1[1][6] = 1.73123863458908;
   fWeightMatrix0to1[2][6] = -5.38207637598066;
   fWeightMatrix0to1[3][6] = -43.2867783744861;
   fWeightMatrix0to1[4][6] = 1.66178021309675;
   fWeightMatrix0to1[5][6] = 1.81462503780366;
   fWeightMatrix0to1[6][6] = 7.19271802608438;
   fWeightMatrix0to1[7][6] = -6.28270192824069;
   fWeightMatrix0to1[8][6] = 0.190903027471646;
   fWeightMatrix0to1[9][6] = 0.00958391505299852;
   fWeightMatrix0to1[10][6] = 2.08862666053485;
   fWeightMatrix0to1[11][6] = -0.936718377834078;
   fWeightMatrix0to1[12][6] = -1.01305118826263;
   fWeightMatrix0to1[13][6] = 2.45566963523256;
   fWeightMatrix0to1[14][6] = -0.752202208818582;
   fWeightMatrix0to1[0][7] = -0.155795926493112;
   fWeightMatrix0to1[1][7] = 0.0283363442421648;
   fWeightMatrix0to1[2][7] = 0.0800090848166211;
   fWeightMatrix0to1[3][7] = 0.139073245423764;
   fWeightMatrix0to1[4][7] = 0.126675140551754;
   fWeightMatrix0to1[5][7] = 0.132410101357948;
   fWeightMatrix0to1[6][7] = 0.232739579025553;
   fWeightMatrix0to1[7][7] = 0.577574560832318;
   fWeightMatrix0to1[8][7] = -0.251553324271964;
   fWeightMatrix0to1[9][7] = -0.0927217978156641;
   fWeightMatrix0to1[10][7] = -0.0643411435408434;
   fWeightMatrix0to1[11][7] = -0.500827205905237;
   fWeightMatrix0to1[12][7] = 0.0121432931876004;
   fWeightMatrix0to1[13][7] = 0.434574543828682;
   fWeightMatrix0to1[14][7] = -0.0761871240636283;
   fWeightMatrix0to1[0][8] = 2.38171428611867;
   fWeightMatrix0to1[1][8] = -7.20001734439703;
   fWeightMatrix0to1[2][8] = -0.0141581360402334;
   fWeightMatrix0to1[3][8] = 1.39573737326664;
   fWeightMatrix0to1[4][8] = 21.3502004108793;
   fWeightMatrix0to1[5][8] = 9.72872299068363;
   fWeightMatrix0to1[6][8] = -9.78733105518323;
   fWeightMatrix0to1[7][8] = -5.14455695637507;
   fWeightMatrix0to1[8][8] = 3.32659383810233;
   fWeightMatrix0to1[9][8] = -0.413233618874033;
   fWeightMatrix0to1[10][8] = 1.36551440806467;
   fWeightMatrix0to1[11][8] = 1.46319882490512;
   fWeightMatrix0to1[12][8] = -0.123021676935772;
   fWeightMatrix0to1[13][8] = -0.712055261122024;
   fWeightMatrix0to1[14][8] = -1.73847468647799;
   fWeightMatrix0to1[0][9] = 30.1277303126438;
   fWeightMatrix0to1[1][9] = 25.1430311891932;
   fWeightMatrix0to1[2][9] = -20.1271520734712;
   fWeightMatrix0to1[3][9] = -2.86617735426977;
   fWeightMatrix0to1[4][9] = 12.5786599124222;
   fWeightMatrix0to1[5][9] = 9.97514832149729;
   fWeightMatrix0to1[6][9] = 11.7385490429403;
   fWeightMatrix0to1[7][9] = -12.6434926667057;
   fWeightMatrix0to1[8][9] = -9.7671113605031;
   fWeightMatrix0to1[9][9] = -5.54606508691081;
   fWeightMatrix0to1[10][9] = 2.56108880000847;
   fWeightMatrix0to1[11][9] = -0.460789610649546;
   fWeightMatrix0to1[12][9] = 1.46895811014505;
   fWeightMatrix0to1[13][9] = 0.695485133925914;
   fWeightMatrix0to1[14][9] = 12.6194796561148;
   fWeightMatrix0to1[0][10] = -24.6582371515382;
   fWeightMatrix0to1[1][10] = -19.3137379693188;
   fWeightMatrix0to1[2][10] = 19.6087441926088;
   fWeightMatrix0to1[3][10] = 5.17083718823004;
   fWeightMatrix0to1[4][10] = -5.91344115203612;
   fWeightMatrix0to1[5][10] = 1.10909121651018;
   fWeightMatrix0to1[6][10] = -7.6235738986434;
   fWeightMatrix0to1[7][10] = -5.40001871381019;
   fWeightMatrix0to1[8][10] = 4.18684400845363;
   fWeightMatrix0to1[9][10] = -1.43097071514224;
   fWeightMatrix0to1[10][10] = 2.36986782783476;
   fWeightMatrix0to1[11][10] = -2.27253314346997;
   fWeightMatrix0to1[12][10] = -0.139628658935337;
   fWeightMatrix0to1[13][10] = -4.02277739784942;
   fWeightMatrix0to1[14][10] = -14.9555721233393;
   // weight matrix from layer 1 to 2
   fWeightMatrix1to2[0][0] = 2.79720955664583;
   fWeightMatrix1to2[1][0] = -0.151486152348705;
   fWeightMatrix1to2[2][0] = 0.173942519197864;
   fWeightMatrix1to2[3][0] = -1.25593595671485;
   fWeightMatrix1to2[4][0] = 5.77425499842802;
   fWeightMatrix1to2[0][1] = 6.71121492364247;
   fWeightMatrix1to2[1][1] = 2.62879145328719;
   fWeightMatrix1to2[2][1] = 1.05741980384841;
   fWeightMatrix1to2[3][1] = 0.166455230637263;
   fWeightMatrix1to2[4][1] = 1.07853281439478;
   fWeightMatrix1to2[0][2] = -2.05380059106329;
   fWeightMatrix1to2[1][2] = -2.97621085228852;
   fWeightMatrix1to2[2][2] = -11.0215349730693;
   fWeightMatrix1to2[3][2] = -1.30033079420623;
   fWeightMatrix1to2[4][2] = -0.348514550628811;
   fWeightMatrix1to2[0][3] = -2.49278158910238;
   fWeightMatrix1to2[1][3] = 6.27015745584361;
   fWeightMatrix1to2[2][3] = 10.5736961625406;
   fWeightMatrix1to2[3][3] = 0.797142345288444;
   fWeightMatrix1to2[4][3] = -0.022573138517547;
   fWeightMatrix1to2[0][4] = 0.620881286729325;
   fWeightMatrix1to2[1][4] = 0.0101659989354995;
   fWeightMatrix1to2[2][4] = 1.42190927739597;
   fWeightMatrix1to2[3][4] = 0.00324331003868128;
   fWeightMatrix1to2[4][4] = 0.108815791449441;
   fWeightMatrix1to2[0][5] = -1.40173338417106;
   fWeightMatrix1to2[1][5] = 1.98120217386658;
   fWeightMatrix1to2[2][5] = 1.76920742835602;
   fWeightMatrix1to2[3][5] = -0.644702326032282;
   fWeightMatrix1to2[4][5] = -0.326777867223666;
   fWeightMatrix1to2[0][6] = -4.08472016687456;
   fWeightMatrix1to2[1][6] = 0.135837536452044;
   fWeightMatrix1to2[2][6] = 1.46805743148412;
   fWeightMatrix1to2[3][6] = -0.417483901495872;
   fWeightMatrix1to2[4][6] = 0.485754753838734;
   fWeightMatrix1to2[0][7] = 0.904904716319452;
   fWeightMatrix1to2[1][7] = -0.648379734723889;
   fWeightMatrix1to2[2][7] = -0.134083302044068;
   fWeightMatrix1to2[3][7] = -1.33059106937105;
   fWeightMatrix1to2[4][7] = 0.324774532766318;
   fWeightMatrix1to2[0][8] = -1.49433621421911;
   fWeightMatrix1to2[1][8] = 0.189774049400349;
   fWeightMatrix1to2[2][8] = -0.339980391048695;
   fWeightMatrix1to2[3][8] = -0.05715403385421;
   fWeightMatrix1to2[4][8] = 1.32724211014605;
   fWeightMatrix1to2[0][9] = -1.96641518487594;
   fWeightMatrix1to2[1][9] = 0.132587339435191;
   fWeightMatrix1to2[2][9] = -0.400156076484816;
   fWeightMatrix1to2[3][9] = -0.258400246632237;
   fWeightMatrix1to2[4][9] = 1.18644051568389;
   fWeightMatrix1to2[0][10] = 1.72658372663057;
   fWeightMatrix1to2[1][10] = 8.07848706609845;
   fWeightMatrix1to2[2][10] = 5.09481897459204;
   fWeightMatrix1to2[3][10] = -4.32026779355199;
   fWeightMatrix1to2[4][10] = -3.98207610753733;
   fWeightMatrix1to2[0][11] = -0.746020112143016;
   fWeightMatrix1to2[1][11] = -0.135691737448349;
   fWeightMatrix1to2[2][11] = -0.0430708617808504;
   fWeightMatrix1to2[3][11] = -0.534200351240709;
   fWeightMatrix1to2[4][11] = -0.346441932939965;
   fWeightMatrix1to2[0][12] = 0.26800645130765;
   fWeightMatrix1to2[1][12] = 0.522205629144538;
   fWeightMatrix1to2[2][12] = 0.0660768443790406;
   fWeightMatrix1to2[3][12] = -0.550649131688459;
   fWeightMatrix1to2[4][12] = 2.58697799134814;
   fWeightMatrix1to2[0][13] = 8.52688192174694;
   fWeightMatrix1to2[1][13] = 1.67995956272673;
   fWeightMatrix1to2[2][13] = -0.252208161845423;
   fWeightMatrix1to2[3][13] = -0.547602353845468;
   fWeightMatrix1to2[4][13] = -0.561188294351228;
   fWeightMatrix1to2[0][14] = 0.558112796602274;
   fWeightMatrix1to2[1][14] = 0.955937987355552;
   fWeightMatrix1to2[2][14] = 1.17748892953067;
   fWeightMatrix1to2[3][14] = -0.357607395886507;
   fWeightMatrix1to2[4][14] = -0.0617062024115915;
   fWeightMatrix1to2[0][15] = -1.88760562580474;
   fWeightMatrix1to2[1][15] = 4.16018095708516;
   fWeightMatrix1to2[2][15] = 13.2483968072172;
   fWeightMatrix1to2[3][15] = 6.59676654757569;
   fWeightMatrix1to2[4][15] = -5.45838488367193;
   // weight matrix from layer 2 to 3
   fWeightMatrix2to3[0][0] = 0.519386928388615;
   fWeightMatrix2to3[0][1] = -1.31189762424796;
   fWeightMatrix2to3[0][2] = -1.9676227392502;
   fWeightMatrix2to3[0][3] = 0.97268070376091;
   fWeightMatrix2to3[0][4] = -2.37786802957223;
   fWeightMatrix2to3[0][5] = -0.515403212471199;
}

inline double ReadMLP3::GetMvaValue__( const std::vector<double>& inputValues ) const
{
   if (inputValues.size() != (unsigned int)10) {
      std::cout << "Input vector needs to be of size " << 10 << std::endl;
      return 0;
   }

   std::array<double, 16> fWeights1 {{}};
   std::array<double, 6> fWeights2 {{}};
   std::array<double, 1> fWeights3 {{}};
   fWeights1.back() = 1.;
   fWeights2.back() = 1.;

   // layer 0 to 1
   for (int o=0; o<15; o++) {
      std::array<double, 11> buffer; // no need to initialise
      for (int i = 0; i<11 - 1; i++) {
         buffer[i] = fWeightMatrix0to1[o][i] * inputValues[i];
      } // loop over i
      buffer.back() = fWeightMatrix0to1[o][10];      for (int i=0; i<11; i++) {
         fWeights1[o] += buffer[i];
      } // loop over i
    } // loop over o
   for (int o=0; o<15; o++) {
      fWeights1[o] = ActivationFnc(fWeights1[o]);
   } // loop over o
   // layer 1 to 2
   for (int o=0; o<5; o++) {
      std::array<double, 16> buffer; // no need to initialise
      for (int i=0; i<16; i++) {
         buffer[i] = fWeightMatrix1to2[o][i] * fWeights1[i];
      } // loop over i
      for (int i=0; i<16; i++) {
         fWeights2[o] += buffer[i];
      } // loop over i
    } // loop over o
   for (int o=0; o<5; o++) {
      fWeights2[o] = ActivationFnc(fWeights2[o]);
   } // loop over o
   // layer 2 to 3
   for (int o=0; o<1; o++) {
      std::array<double, 6> buffer; // no need to initialise
      for (int i=0; i<6; i++) {
         buffer[i] = fWeightMatrix2to3[o][i] * fWeights2[i];
      } // loop over i
      for (int i=0; i<6; i++) {
         fWeights3[o] += buffer[i];
      } // loop over i
    } // loop over o
   for (int o=0; o<1; o++) {
      fWeights3[o] = OutputActivationFnc(fWeights3[o]);
   } // loop over o

   return fWeights3[0];
}

inline double ReadMLP3::ActivationFnc(double x) const {
   // fast hyperbolic tan approximation
   if (x > 4.97) return 1;
   if (x < -4.97) return -1;
   float x2 = x * x;
   float a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
   float b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
   return a / b;
}
inline double ReadMLP3::OutputActivationFnc(double x) const {
   // sigmoid
   return 1.0/(1.0+exp(-x));
}

// Clean up
inline void ReadMLP3::Clear()
{
}
   inline double ReadMLP3::GetMvaValue( const std::vector<double>& inputValues ) const
   {
      // classifier response value
      double retval = 0;

      // classifier response, sanity check first
      if (!IsStatusClean()) {
         std::cout << "Problem in class \"" << fClassName << "\": cannot return classifier response"
                   << " because status is dirty" << std::endl;
         retval = 0;
      }
      else {
            std::vector<double> iV(inputValues);
            Transform( iV, -1 );
            retval = GetMvaValue__( iV );
      }

      return retval;
   }

//_______________________________________________________________________
inline void ReadMLP3::InitTransform_1()
{
   double fMin_1[3][10];
   double fMax_1[3][10];
   // Normalization transformation, initialisation
   fMin_1[0][0] = 30.2008743286;
   fMax_1[0][0] = 825.29473877;
   fScal_1[0][0] = 2.0/(fMax_1[0][0]-fMin_1[0][0]);
   fOff_1[0][0] = fMin_1[0][0]*fScal_1[0][0]+1.;
   fMin_1[1][0] = 30.2008743286;
   fMax_1[1][0] = 825.274047852;
   fScal_1[1][0] = 2.0/(fMax_1[1][0]-fMin_1[1][0]);
   fOff_1[1][0] = fMin_1[1][0]*fScal_1[1][0]+1.;
   fMin_1[2][0] = 30.2008743286;
   fMax_1[2][0] = 825.29473877;
   fScal_1[2][0] = 2.0/(fMax_1[2][0]-fMin_1[2][0]);
   fOff_1[2][0] = fMin_1[2][0]*fScal_1[2][0]+1.;
   fMin_1[0][1] = -3.14158201218;
   fMax_1[0][1] = 3.14154338837;
   fScal_1[0][1] = 2.0/(fMax_1[0][1]-fMin_1[0][1]);
   fOff_1[0][1] = fMin_1[0][1]*fScal_1[0][1]+1.;
   fMin_1[1][1] = -3.14158010483;
   fMax_1[1][1] = 3.14154338837;
   fScal_1[1][1] = 2.0/(fMax_1[1][1]-fMin_1[1][1]);
   fOff_1[1][1] = fMin_1[1][1]*fScal_1[1][1]+1.;
   fMin_1[2][1] = -3.14158201218;
   fMax_1[2][1] = 3.14154338837;
   fScal_1[2][1] = 2.0/(fMax_1[2][1]-fMin_1[2][1]);
   fOff_1[2][1] = fMin_1[2][1]*fScal_1[2][1]+1.;
   fMin_1[0][2] = -1804.5;
   fMax_1[0][2] = 1804.5;
   fScal_1[0][2] = 2.0/(fMax_1[0][2]-fMin_1[0][2]);
   fOff_1[0][2] = fMin_1[0][2]*fScal_1[0][2]+1.;
   fMin_1[1][2] = -1804.5;
   fMax_1[1][2] = 1804.5;
   fScal_1[1][2] = 2.0/(fMax_1[1][2]-fMin_1[1][2]);
   fOff_1[1][2] = fMin_1[1][2]*fScal_1[1][2]+1.;
   fMin_1[2][2] = -1804.5;
   fMax_1[2][2] = 1804.5;
   fScal_1[2][2] = 2.0/(fMax_1[2][2]-fMin_1[2][2]);
   fOff_1[2][2] = fMin_1[2][2]*fScal_1[2][2]+1.;
   fMin_1[0][3] = 34.4277954102;
   fMax_1[0][3] = 1017.16442871;
   fScal_1[0][3] = 2.0/(fMax_1[0][3]-fMin_1[0][3]);
   fOff_1[0][3] = fMin_1[0][3]*fScal_1[0][3]+1.;
   fMin_1[1][3] = 30.2568588257;
   fMax_1[1][3] = 1017.16442871;
   fScal_1[1][3] = 2.0/(fMax_1[1][3]-fMin_1[1][3]);
   fOff_1[1][3] = fMin_1[1][3]*fScal_1[1][3]+1.;
   fMin_1[2][3] = 30.2568588257;
   fMax_1[2][3] = 1017.16442871;
   fScal_1[2][3] = 2.0/(fMax_1[2][3]-fMin_1[2][3]);
   fOff_1[2][3] = fMin_1[2][3]*fScal_1[2][3]+1.;
   fMin_1[0][4] = -3.1415784359;
   fMax_1[0][4] = 3.14154338837;
   fScal_1[0][4] = 2.0/(fMax_1[0][4]-fMin_1[0][4]);
   fOff_1[0][4] = fMin_1[0][4]*fScal_1[0][4]+1.;
   fMin_1[1][4] = -3.14158201218;
   fMax_1[1][4] = 3.14153671265;
   fScal_1[1][4] = 2.0/(fMax_1[1][4]-fMin_1[1][4]);
   fOff_1[1][4] = fMin_1[1][4]*fScal_1[1][4]+1.;
   fMin_1[2][4] = -3.14158201218;
   fMax_1[2][4] = 3.14154338837;
   fScal_1[2][4] = 2.0/(fMax_1[2][4]-fMin_1[2][4]);
   fOff_1[2][4] = fMin_1[2][4]*fScal_1[2][4]+1.;
   fMin_1[0][5] = -2154.5;
   fMax_1[0][5] = 2154.5;
   fScal_1[0][5] = 2.0/(fMax_1[0][5]-fMin_1[0][5]);
   fOff_1[0][5] = fMin_1[0][5]*fScal_1[0][5]+1.;
   fMin_1[1][5] = -2154.5;
   fMax_1[1][5] = 2154.5;
   fScal_1[1][5] = 2.0/(fMax_1[1][5]-fMin_1[1][5]);
   fOff_1[1][5] = fMin_1[1][5]*fScal_1[1][5]+1.;
   fMin_1[2][5] = -2154.5;
   fMax_1[2][5] = 2154.5;
   fScal_1[2][5] = 2.0/(fMax_1[2][5]-fMin_1[2][5]);
   fOff_1[2][5] = fMin_1[2][5]*fScal_1[2][5]+1.;
   fMin_1[0][6] = 30.8757247925;
   fMax_1[0][6] = 1022.02819824;
   fScal_1[0][6] = 2.0/(fMax_1[0][6]-fMin_1[0][6]);
   fOff_1[0][6] = fMin_1[0][6]*fScal_1[0][6]+1.;
   fMin_1[1][6] = 30.0867195129;
   fMax_1[1][6] = 1022.9755249;
   fScal_1[1][6] = 2.0/(fMax_1[1][6]-fMin_1[1][6]);
   fOff_1[1][6] = fMin_1[1][6]*fScal_1[1][6]+1.;
   fMin_1[2][6] = 30.0867195129;
   fMax_1[2][6] = 1022.9755249;
   fScal_1[2][6] = 2.0/(fMax_1[2][6]-fMin_1[2][6]);
   fOff_1[2][6] = fMin_1[2][6]*fScal_1[2][6]+1.;
   fMin_1[0][7] = -3.14158201218;
   fMax_1[0][7] = 3.14157223701;
   fScal_1[0][7] = 2.0/(fMax_1[0][7]-fMin_1[0][7]);
   fOff_1[0][7] = fMin_1[0][7]*fScal_1[0][7]+1.;
   fMin_1[1][7] = -3.14158010483;
   fMax_1[1][7] = 3.14157223701;
   fScal_1[1][7] = 2.0/(fMax_1[1][7]-fMin_1[1][7]);
   fOff_1[1][7] = fMin_1[1][7]*fScal_1[1][7]+1.;
   fMin_1[2][7] = -3.14158201218;
   fMax_1[2][7] = 3.14157223701;
   fScal_1[2][7] = 2.0/(fMax_1[2][7]-fMin_1[2][7]);
   fOff_1[2][7] = fMin_1[2][7]*fScal_1[2][7]+1.;
   fMin_1[0][8] = -2554.5;
   fMax_1[0][8] = 2554.5;
   fScal_1[0][8] = 2.0/(fMax_1[0][8]-fMin_1[0][8]);
   fOff_1[0][8] = fMin_1[0][8]*fScal_1[0][8]+1.;
   fMin_1[1][8] = -2554.5;
   fMax_1[1][8] = 2554.5;
   fScal_1[1][8] = 2.0/(fMax_1[1][8]-fMin_1[1][8]);
   fOff_1[1][8] = fMin_1[1][8]*fScal_1[1][8]+1.;
   fMin_1[2][8] = -2554.5;
   fMax_1[2][8] = 2554.5;
   fScal_1[2][8] = 2.0/(fMax_1[2][8]-fMin_1[2][8]);
   fOff_1[2][8] = fMin_1[2][8]*fScal_1[2][8]+1.;
   fMin_1[0][9] = -31.1916236877;
   fMax_1[0][9] = 6.39150381088;
   fScal_1[0][9] = 2.0/(fMax_1[0][9]-fMin_1[0][9]);
   fOff_1[0][9] = fMin_1[0][9]*fScal_1[0][9]+1.;
   fMin_1[1][9] = -10.5988121033;
   fMax_1[1][9] = 6.40648078918;
   fScal_1[1][9] = 2.0/(fMax_1[1][9]-fMin_1[1][9]);
   fOff_1[1][9] = fMin_1[1][9]*fScal_1[1][9]+1.;
   fMin_1[2][9] = -31.1916236877;
   fMax_1[2][9] = 6.40648078918;
   fScal_1[2][9] = 2.0/(fMax_1[2][9]-fMin_1[2][9]);
   fOff_1[2][9] = fMin_1[2][9]*fScal_1[2][9]+1.;
}

//_______________________________________________________________________
inline void ReadMLP3::Transform_1( std::vector<double>& iv, int cls) const
{
   // Normalization transformation
   if (cls < 0 || cls > 2) {
   if (2 > 1 ) cls = 2;
      else cls = 2;
   }
   const int nVar = 10;

   // get indices of used variables

   // define the indices of the variables which are transformed by this transformation
   static std::vector<int> indicesGet;
   static std::vector<int> indicesPut;

   if ( indicesGet.empty() ) {
      indicesGet.reserve(fNvars);
      indicesGet.push_back( 0);
      indicesGet.push_back( 1);
      indicesGet.push_back( 2);
      indicesGet.push_back( 3);
      indicesGet.push_back( 4);
      indicesGet.push_back( 5);
      indicesGet.push_back( 6);
      indicesGet.push_back( 7);
      indicesGet.push_back( 8);
      indicesGet.push_back( 9);
   }
   if ( indicesPut.empty() ) {
      indicesPut.reserve(fNvars);
      indicesPut.push_back( 0);
      indicesPut.push_back( 1);
      indicesPut.push_back( 2);
      indicesPut.push_back( 3);
      indicesPut.push_back( 4);
      indicesPut.push_back( 5);
      indicesPut.push_back( 6);
      indicesPut.push_back( 7);
      indicesPut.push_back( 8);
      indicesPut.push_back( 9);
   }

   std::vector<double> dv;
   dv.resize(nVar);
   for (int ivar=0; ivar<nVar; ivar++) dv[ivar] = iv[indicesGet.at(ivar)];
   for (int ivar=0;ivar<10;ivar++) {
      double offset = fOff_1[cls][ivar];
      double scale  = fScal_1[cls][ivar];
      iv[indicesPut.at(ivar)] = scale*dv[ivar]-offset;
   }
}

//_______________________________________________________________________
inline void ReadMLP3::InitTransform()
{
   InitTransform_1();
}

//_______________________________________________________________________
inline void ReadMLP3::Transform( std::vector<double>& iv, int sigOrBgd ) const
{
   Transform_1( iv, sigOrBgd );
}
#endif