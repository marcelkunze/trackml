#ifndef TMVAClassification_MLP1_H
#define TMVAClassification_MLP1_H
// Class: ReadMLP1
// Automatically generated by MethodBase::MakeClass
//

/* configuration options =====================================================

#GEN -*-*-*-*-*-*-*-*-*-*-*- general info -*-*-*-*-*-*-*-*-*-*-*-

Method         : MLP::MLP1
TMVA Release   : 4.2.1         [262657]
ROOT Release   : 6.16/00       [397312]
Creator        : marcel
Date           : Tue May 28 08:43:15 2019
Host           : Linux SFT-ubuntu-1804-3 4.15.0-38-generic #41-Ubuntu SMP Wed Oct 10 10:59:38 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
Dir            : /home/marcel/workspace/tracking/macro
Training events: 600000
Analysis type  : [Classification]


#OPT -*-*-*-*-*-*-*-*-*-*-*-*- options -*-*-*-*-*-*-*-*-*-*-*-*-

# Set by User:
NCycles: "100" [Number of training cycles]
HiddenLayers: "15,5" [Specification of hidden layer architecture]
NeuronType: "tanh" [Neuron activation function type]
V: "False" [Verbose output (short form of "VerbosityLevel" below - overrides the latter one)]
VarTransform: "N" [List of variable transformations performed before training, e.g., "D_Background,P_Signal,G,N_AllClasses" for: "Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)"]
H: "False" [Print method-specific help message]
TestRate: "5" [Test for overtraining performed at each #th epochs]
UseRegulator: "False" [Use regulator to avoid over-training]
# Default:
RandomSeed: "1" [Random seed for initial synapse weights (0 means unique seed for each run; default value '1')]
EstimatorType: "CE" [MSE (Mean Square Estimator) for Gaussian Likelihood or CE(Cross-Entropy) for Bernoulli Likelihood]
NeuronInputType: "sum" [Neuron input function type]
VerbosityLevel: "Default" [Verbosity level]
CreateMVAPdfs: "False" [Create PDFs for classifier outputs (signal and background)]
IgnoreNegWeightsInTraining: "False" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]
TrainingMethod: "BP" [Train with Back-Propagation (BP), BFGS Algorithm (BFGS), or Genetic Algorithm (GA - slower and worse)]
LearningRate: "2.000000e-02" [ANN learning rate parameter]
DecayRate: "1.000000e-02" [Decay rate for learning parameter]
EpochMonitoring: "False" [Provide epoch-wise monitoring plots according to TestRate (caution: causes big ROOT output file!)]
Sampling: "1.000000e+00" [Only 'Sampling' (randomly selected) events are trained each epoch]
SamplingEpoch: "1.000000e+00" [Sampling is used for the first 'SamplingEpoch' epochs, afterwards, all events are taken for training]
SamplingImportance: "1.000000e+00" [ The sampling weights of events in epochs which successful (worse estimator than before) are multiplied with SamplingImportance, else they are divided.]
SamplingTraining: "True" [The training sample is sampled]
SamplingTesting: "False" [The testing sample is sampled]
ResetStep: "50" [How often BFGS should reset history]
Tau: "3.000000e+00" [LineSearch "size step"]
BPMode: "sequential" [Back-propagation learning mode: sequential or batch]
BatchSize: "-1" [Batch size: number of events/batch, only set if in Batch Mode, -1 for BatchSize=number_of_events]
ConvergenceImprove: "1.000000e-30" [Minimum improvement which counts as improvement (<0 means automatic convergence check is turned off)]
ConvergenceTests: "-1" [Number of steps (without improvement) required for convergence (<0 means automatic convergence check is turned off)]
UpdateLimit: "10000" [Maximum times of regulator update]
CalculateErrors: "False" [Calculates inverse Hessian matrix at the end of the training to be able to calculate the uncertainties of an MVA value]
WeightRange: "1.000000e+00" [Take the events for the estimator calculations from small deviations from the desired value to large deviations only over the weight range]
##


#VAR -*-*-*-*-*-*-*-*-*-*-*-* variables *-*-*-*-*-*-*-*-*-*-*-*-

NVar 8
rz1                           rz1                           rz1                           rz1                                                             'F'    [30.1909446716,1016.72784424]
phi1                          phi1                          phi1                          phi1                                                            'F'    [-3.14157652855,3.14153671265]
z1                            z1                            z1                            z1                                                              'F'    [-2154.5,2154.5]
rz2                           rz2                           rz2                           rz2                                                             'F'    [30.2008743286,903.067932129]
phi2                          phi2                          phi2                          phi2                                                            'F'    [-3.14157295227,3.14157223701]
z2                            z2                            z2                            z2                                                              'F'    [-2554.5,2554.5]
f0                            f0                            f0                            f0                                                              'F'    [2.74715353044e-06,1.47594094276]
f1                            f1                            f1                            f1                                                              'F'    [4.43917379016e-05,1.48255169392]
NSpec 0


============================================================================ */

#include <array>
#include <vector>
#include <cmath>
#include <string>
#include <iostream>

#ifndef IClassifierReader__def
#define IClassifierReader__def

class IClassifierReader {

 public:

   // constructor
   IClassifierReader() : fStatusIsClean( true ) {}
   virtual ~IClassifierReader() {}

   // return classifier response
   virtual double GetMvaValue( const std::vector<double>& inputValues ) const = 0;

   // returns classifier status
   bool IsStatusClean() const { return fStatusIsClean; }

 protected:

   bool fStatusIsClean;
};

#endif

class ReadMLP1 : public IClassifierReader {

 public:

   // constructor
   ReadMLP1( std::vector<std::string>& theInputVars )
      : IClassifierReader(),
        fClassName( "ReadMLP1" ),
        fNvars( 8 )
   {
      // the training input variables
      const char* inputVars[] = { "rz1", "phi1", "z1", "rz2", "phi2", "z2", "f0", "f1" };

      // sanity checks
      if (theInputVars.size() <= 0) {
         std::cout << "Problem in class \"" << fClassName << "\": empty input vector" << std::endl;
         fStatusIsClean = false;
      }

      if (theInputVars.size() != fNvars) {
         std::cout << "Problem in class \"" << fClassName << "\": mismatch in number of input values: "
                   << theInputVars.size() << " != " << fNvars << std::endl;
         fStatusIsClean = false;
      }

      // validate input variables
      for (size_t ivar = 0; ivar < theInputVars.size(); ivar++) {
         if (theInputVars[ivar] != inputVars[ivar]) {
            std::cout << "Problem in class \"" << fClassName << "\": mismatch in input variable names" << std::endl
                      << " for variable [" << ivar << "]: " << theInputVars[ivar].c_str() << " != " << inputVars[ivar] << std::endl;
            fStatusIsClean = false;
         }
      }

      // initialize min and max vectors (for normalisation)
      fVmin[0] = -1;
      fVmax[0] = 1;
      fVmin[1] = -1;
      fVmax[1] = 1;
      fVmin[2] = -1;
      fVmax[2] = 1;
      fVmin[3] = -1;
      fVmax[3] = 1;
      fVmin[4] = -1;
      fVmax[4] = 1;
      fVmin[5] = -1;
      fVmax[5] = 1;
      fVmin[6] = -1;
      fVmax[6] = 0.99999988079071;
      fVmin[7] = -1;
      fVmax[7] = 0.99999988079071;

      // initialize input variable types
      fType[0] = 'F';
      fType[1] = 'F';
      fType[2] = 'F';
      fType[3] = 'F';
      fType[4] = 'F';
      fType[5] = 'F';
      fType[6] = 'F';
      fType[7] = 'F';

      // initialize constants
      Initialize();

      // initialize transformation
      InitTransform();
   }

   // destructor
   virtual ~ReadMLP1() {
      Clear(); // method-specific
   }

   // the classifier response
   // "inputValues" is a vector of input values in the same order as the
   // variables given to the constructor
   double GetMvaValue( const std::vector<double>& inputValues ) const override;

 private:

   // method-specific destructor
   void Clear();

   // input variable transformation

   double fOff_1[3][8];
   double fScal_1[3][8];
   void InitTransform_1();
   void Transform_1( std::vector<double> & iv, int sigOrBgd ) const;
   void InitTransform();
   void Transform( std::vector<double> & iv, int sigOrBgd ) const;

   // common member variables
   const char* fClassName;

   const size_t fNvars;
   size_t GetNvar()           const { return fNvars; }
   char   GetType( int ivar ) const { return fType[ivar]; }

   // normalisation of input variables
   double fVmin[8];
   double fVmax[8];
   double NormVariable( double x, double xmin, double xmax ) const {
      // normalise to output range: [-1, 1]
      return 2*(x - xmin)/(xmax - xmin) - 1.0;
   }

   // type of input variable: 'F' or 'I'
   char   fType[8];

   // initialize internal variables
   void Initialize();
   double GetMvaValue__( const std::vector<double>& inputValues ) const;

   // private members (method specific)

   double ActivationFnc(double x) const;
   double OutputActivationFnc(double x) const;

   double fWeightMatrix0to1[16][9];   // weight matrix from layer 0 to 1
   double fWeightMatrix1to2[6][16];   // weight matrix from layer 1 to 2
   double fWeightMatrix2to3[1][6];   // weight matrix from layer 2 to 3

};

inline void ReadMLP1::Initialize()
{
   // build network structure
   // weight matrix from layer 0 to 1
   fWeightMatrix0to1[0][0] = 7.93754725666237;
   fWeightMatrix0to1[1][0] = 39.0209548972078;
   fWeightMatrix0to1[2][0] = 0.50570436355942;
   fWeightMatrix0to1[3][0] = 16.4482142460046;
   fWeightMatrix0to1[4][0] = -53.3234232176774;
   fWeightMatrix0to1[5][0] = -70.7240921296598;
   fWeightMatrix0to1[6][0] = -122.919237786245;
   fWeightMatrix0to1[7][0] = 83.0629580096757;
   fWeightMatrix0to1[8][0] = 6.16075563863795;
   fWeightMatrix0to1[9][0] = -10.0984797645234;
   fWeightMatrix0to1[10][0] = -41.8981466698756;
   fWeightMatrix0to1[11][0] = -3.60331914954685;
   fWeightMatrix0to1[12][0] = -3.82545865861741;
   fWeightMatrix0to1[13][0] = -0.613753604465718;
   fWeightMatrix0to1[14][0] = 14.4036822861841;
   fWeightMatrix0to1[0][1] = 0.124551900794551;
   fWeightMatrix0to1[1][1] = 0.327599963404696;
   fWeightMatrix0to1[2][1] = 0.419194320715704;
   fWeightMatrix0to1[3][1] = -0.0826994534298592;
   fWeightMatrix0to1[4][1] = 0.0210732333263232;
   fWeightMatrix0to1[5][1] = -0.0933555331981088;
   fWeightMatrix0to1[6][1] = 0.089969073432028;
   fWeightMatrix0to1[7][1] = 0.00525475643678494;
   fWeightMatrix0to1[8][1] = 0.0332838900732164;
   fWeightMatrix0to1[9][1] = -0.0625638767851671;
   fWeightMatrix0to1[10][1] = -0.00395607972883221;
   fWeightMatrix0to1[11][1] = 0.16948934821821;
   fWeightMatrix0to1[12][1] = -0.0101062625325421;
   fWeightMatrix0to1[13][1] = -0.309451172682632;
   fWeightMatrix0to1[14][1] = -0.231275303355729;
   fWeightMatrix0to1[0][2] = 1.611121278229;
   fWeightMatrix0to1[1][2] = 3.39285715516948;
   fWeightMatrix0to1[2][2] = -5.56111231251812;
   fWeightMatrix0to1[3][2] = 11.1306866660358;
   fWeightMatrix0to1[4][2] = 1.54283614530448;
   fWeightMatrix0to1[5][2] = -1.79640496963119;
   fWeightMatrix0to1[6][2] = 3.29919842803971;
   fWeightMatrix0to1[7][2] = -5.06954395660357;
   fWeightMatrix0to1[8][2] = 1.60034500053364;
   fWeightMatrix0to1[9][2] = -0.101457323128003;
   fWeightMatrix0to1[10][2] = 0.102640435868867;
   fWeightMatrix0to1[11][2] = -0.670382913712032;
   fWeightMatrix0to1[12][2] = 0.153440811826256;
   fWeightMatrix0to1[13][2] = 6.19092359586763;
   fWeightMatrix0to1[14][2] = -6.23203403297976;
   fWeightMatrix0to1[0][3] = -27.6460089215257;
   fWeightMatrix0to1[1][3] = -21.7502444405854;
   fWeightMatrix0to1[2][3] = 0.276680145316062;
   fWeightMatrix0to1[3][3] = -5.44603514976198;
   fWeightMatrix0to1[4][3] = 40.5172225434864;
   fWeightMatrix0to1[5][3] = 54.8494769297255;
   fWeightMatrix0to1[6][3] = 99.2984490918368;
   fWeightMatrix0to1[7][3] = -59.835579527429;
   fWeightMatrix0to1[8][3] = 13.0636509226831;
   fWeightMatrix0to1[9][3] = 2.29511692376164;
   fWeightMatrix0to1[10][3] = 22.930222880519;
   fWeightMatrix0to1[11][3] = 10.2923492768733;
   fWeightMatrix0to1[12][3] = -2.75273036594153;
   fWeightMatrix0to1[13][3] = 1.50419226434204;
   fWeightMatrix0to1[14][3] = -4.47539253266892;
   fWeightMatrix0to1[0][4] = -0.0945703281319618;
   fWeightMatrix0to1[1][4] = -0.275617827633582;
   fWeightMatrix0to1[2][4] = -0.314522381693671;
   fWeightMatrix0to1[3][4] = 0.0600540505593032;
   fWeightMatrix0to1[4][4] = 0.0694018404723328;
   fWeightMatrix0to1[5][4] = 0.216414529476782;
   fWeightMatrix0to1[6][4] = -0.209615885390119;
   fWeightMatrix0to1[7][4] = 0.0930371854711487;
   fWeightMatrix0to1[8][4] = 0.016674719553414;
   fWeightMatrix0to1[9][4] = 0.0337766741270487;
   fWeightMatrix0to1[10][4] = 0.174466843791173;
   fWeightMatrix0to1[11][4] = -0.0145003618651085;
   fWeightMatrix0to1[12][4] = 0.125699764444383;
   fWeightMatrix0to1[13][4] = 0.17767462018337;
   fWeightMatrix0to1[14][4] = 0.0574377761574795;
   fWeightMatrix0to1[0][5] = -1.41409433012922;
   fWeightMatrix0to1[1][5] = -3.53244260741239;
   fWeightMatrix0to1[2][5] = -3.29706529665859;
   fWeightMatrix0to1[3][5] = 5.28110059123415;
   fWeightMatrix0to1[4][5] = -1.62281498768252;
   fWeightMatrix0to1[5][5] = 1.75059234509328;
   fWeightMatrix0to1[6][5] = -3.42701017937449;
   fWeightMatrix0to1[7][5] = 5.04733549378031;
   fWeightMatrix0to1[8][5] = -1.67810183877822;
   fWeightMatrix0to1[9][5] = -0.04926635528597;
   fWeightMatrix0to1[10][5] = -0.095230508423996;
   fWeightMatrix0to1[11][5] = 0.629202609166955;
   fWeightMatrix0to1[12][5] = -0.137831681967811;
   fWeightMatrix0to1[13][5] = 3.21238234972338;
   fWeightMatrix0to1[14][5] = -9.80066421626679;
   fWeightMatrix0to1[0][6] = 10.4809135358136;
   fWeightMatrix0to1[1][6] = 2.99783803948454;
   fWeightMatrix0to1[2][6] = 6.76536479387692;
   fWeightMatrix0to1[3][6] = -0.861702004822589;
   fWeightMatrix0to1[4][6] = -1.15066647092145;
   fWeightMatrix0to1[5][6] = 2.11236305019353;
   fWeightMatrix0to1[6][6] = -1.25900252849235;
   fWeightMatrix0to1[7][6] = -5.30481928485502;
   fWeightMatrix0to1[8][6] = -32.7587405032789;
   fWeightMatrix0to1[9][6] = 9.12770330152821;
   fWeightMatrix0to1[10][6] = -5.50409423526479;
   fWeightMatrix0to1[11][6] = -17.0667058167512;
   fWeightMatrix0to1[12][6] = 4.95475021069932;
   fWeightMatrix0to1[13][6] = 7.10249555302799;
   fWeightMatrix0to1[14][6] = -0.614223315082994;
   fWeightMatrix0to1[0][7] = -1.15822501338605;
   fWeightMatrix0to1[1][7] = -14.1965991422664;
   fWeightMatrix0to1[2][7] = 2.66166166670735;
   fWeightMatrix0to1[3][7] = -18.5852211251336;
   fWeightMatrix0to1[4][7] = -0.0267131751511818;
   fWeightMatrix0to1[5][7] = -11.4345718187236;
   fWeightMatrix0to1[6][7] = 1.10809541221582;
   fWeightMatrix0to1[7][7] = -0.472870972119588;
   fWeightMatrix0to1[8][7] = 0.383307413550188;
   fWeightMatrix0to1[9][7] = -2.52233985663692;
   fWeightMatrix0to1[10][7] = -4.7950977156369;
   fWeightMatrix0to1[11][7] = -18.57259948567;
   fWeightMatrix0to1[12][7] = 4.82344736445931;
   fWeightMatrix0to1[13][7] = 3.04934471600463;
   fWeightMatrix0to1[14][7] = -17.9069549242759;
   fWeightMatrix0to1[0][8] = -10.2369726147386;
   fWeightMatrix0to1[1][8] = 6.71820428439193;
   fWeightMatrix0to1[2][8] = -1.57124174249111;
   fWeightMatrix0to1[3][8] = 3.99923542194223;
   fWeightMatrix0to1[4][8] = -13.8282437343253;
   fWeightMatrix0to1[5][8] = -24.8900313706112;
   fWeightMatrix0to1[6][8] = -25.3145545459032;
   fWeightMatrix0to1[7][8] = 18.5832261958699;
   fWeightMatrix0to1[8][8] = -14.5367121203707;
   fWeightMatrix0to1[9][8] = 1.95678272529057;
   fWeightMatrix0to1[10][8] = -23.8928833443227;
   fWeightMatrix0to1[11][8] = -25.108865977956;
   fWeightMatrix0to1[12][8] = 5.47615545423673;
   fWeightMatrix0to1[13][8] = -2.04287414665136;
   fWeightMatrix0to1[14][8] = 3.77431535071424;
   // weight matrix from layer 1 to 2
   fWeightMatrix1to2[0][0] = -1.28277368828751;
   fWeightMatrix1to2[1][0] = -1.13450649700247;
   fWeightMatrix1to2[2][0] = -0.272051052689025;
   fWeightMatrix1to2[3][0] = -0.0676825446916693;
   fWeightMatrix1to2[4][0] = 0.345811580688054;
   fWeightMatrix1to2[0][1] = 1.10095343951298;
   fWeightMatrix1to2[1][1] = 0.237067111951816;
   fWeightMatrix1to2[2][1] = -0.641621096945174;
   fWeightMatrix1to2[3][1] = 2.55790342596993;
   fWeightMatrix1to2[4][1] = 0.848716964032659;
   fWeightMatrix1to2[0][2] = 5.10586061326843;
   fWeightMatrix1to2[1][2] = -0.938936306344481;
   fWeightMatrix1to2[2][2] = -0.695441073171613;
   fWeightMatrix1to2[3][2] = -5.51344288039882;
   fWeightMatrix1to2[4][2] = -0.157414905701196;
   fWeightMatrix1to2[0][3] = 1.59214751809623;
   fWeightMatrix1to2[1][3] = 1.99922255401857;
   fWeightMatrix1to2[2][3] = -0.16940536715582;
   fWeightMatrix1to2[3][3] = 0.878204115180222;
   fWeightMatrix1to2[4][3] = -0.736010808621883;
   fWeightMatrix1to2[0][4] = -3.42616714561085;
   fWeightMatrix1to2[1][4] = -0.149866601383895;
   fWeightMatrix1to2[2][4] = 0.974372471365019;
   fWeightMatrix1to2[3][4] = -3.4089560973715;
   fWeightMatrix1to2[4][4] = -0.924110010498096;
   fWeightMatrix1to2[0][5] = -1.78534913618375;
   fWeightMatrix1to2[1][5] = 0.946689889602024;
   fWeightMatrix1to2[2][5] = 1.16423719089652;
   fWeightMatrix1to2[3][5] = -2.57303650168791;
   fWeightMatrix1to2[4][5] = -0.954535549415008;
   fWeightMatrix1to2[0][6] = 6.76537362690416;
   fWeightMatrix1to2[1][6] = -2.50124134165313;
   fWeightMatrix1to2[2][6] = 3.95161245942127;
   fWeightMatrix1to2[3][6] = -1.9780624833915;
   fWeightMatrix1to2[4][6] = 0.270990069516066;
   fWeightMatrix1to2[0][7] = -10.5357524926286;
   fWeightMatrix1to2[1][7] = 2.5305989402402;
   fWeightMatrix1to2[2][7] = -1.37331028140352;
   fWeightMatrix1to2[3][7] = 1.93142742578373;
   fWeightMatrix1to2[4][7] = 0.518910914576792;
   fWeightMatrix1to2[0][8] = -4.45943978388056;
   fWeightMatrix1to2[1][8] = 1.51945533519154;
   fWeightMatrix1to2[2][8] = -0.341951653127224;
   fWeightMatrix1to2[3][8] = -0.747439587280184;
   fWeightMatrix1to2[4][8] = -0.581338110445059;
   fWeightMatrix1to2[0][9] = 0.363214072268161;
   fWeightMatrix1to2[1][9] = 4.64744086099109;
   fWeightMatrix1to2[2][9] = -1.7262271150497;
   fWeightMatrix1to2[3][9] = -5.60064057983781;
   fWeightMatrix1to2[4][9] = 1.64105620573223;
   fWeightMatrix1to2[0][10] = 0.617998923885497;
   fWeightMatrix1to2[1][10] = 0.858409814553217;
   fWeightMatrix1to2[2][10] = 2.24849236444595;
   fWeightMatrix1to2[3][10] = -1.91331868350243;
   fWeightMatrix1to2[4][10] = 0.618456873719805;
   fWeightMatrix1to2[0][11] = 3.43167657638329;
   fWeightMatrix1to2[1][11] = -0.765041079582237;
   fWeightMatrix1to2[2][11] = 0.368332176160614;
   fWeightMatrix1to2[3][11] = -0.68623853875441;
   fWeightMatrix1to2[4][11] = -1.44642821027189;
   fWeightMatrix1to2[0][12] = -2.21769489504124;
   fWeightMatrix1to2[1][12] = -5.2725674084469;
   fWeightMatrix1to2[2][12] = -0.0806664836682259;
   fWeightMatrix1to2[3][12] = -0.228089679755338;
   fWeightMatrix1to2[4][12] = -1.87963968633861;
   fWeightMatrix1to2[0][13] = 5.10308788695917;
   fWeightMatrix1to2[1][13] = -0.78014385341303;
   fWeightMatrix1to2[2][13] = -0.726541651660324;
   fWeightMatrix1to2[3][13] = -5.36576693804842;
   fWeightMatrix1to2[4][13] = -0.0178261104606803;
   fWeightMatrix1to2[0][14] = 1.5661072212361;
   fWeightMatrix1to2[1][14] = 1.98733649514764;
   fWeightMatrix1to2[2][14] = -0.181293021039579;
   fWeightMatrix1to2[3][14] = 0.834344006833865;
   fWeightMatrix1to2[4][14] = -0.697689025023319;
   fWeightMatrix1to2[0][15] = -13.5283835332302;
   fWeightMatrix1to2[1][15] = -1.72163513314821;
   fWeightMatrix1to2[2][15] = 0.201415931292549;
   fWeightMatrix1to2[3][15] = -0.381005000195751;
   fWeightMatrix1to2[4][15] = 2.32682257956234;
   // weight matrix from layer 2 to 3
   fWeightMatrix2to3[0][0] = 4.19285823409066;
   fWeightMatrix2to3[0][1] = 1.95177649429129;
   fWeightMatrix2to3[0][2] = 3.82908064807679;
   fWeightMatrix2to3[0][3] = 2.25736981090713;
   fWeightMatrix2to3[0][4] = -1.7194657664395;
   fWeightMatrix2to3[0][5] = -0.130873384614649;
}

inline double ReadMLP1::GetMvaValue__( const std::vector<double>& inputValues ) const
{
   if (inputValues.size() != (unsigned int)8) {
      std::cout << "Input vector needs to be of size " << 8 << std::endl;
      return 0;
   }

   std::array<double, 16> fWeights1 {{}};
   std::array<double, 6> fWeights2 {{}};
   std::array<double, 1> fWeights3 {{}};
   fWeights1.back() = 1.;
   fWeights2.back() = 1.;

   // layer 0 to 1
   for (int o=0; o<15; o++) {
      std::array<double, 9> buffer; // no need to initialise
      for (int i = 0; i<9 - 1; i++) {
         buffer[i] = fWeightMatrix0to1[o][i] * inputValues[i];
      } // loop over i
      buffer.back() = fWeightMatrix0to1[o][8];      for (int i=0; i<9; i++) {
         fWeights1[o] += buffer[i];
      } // loop over i
    } // loop over o
   for (int o=0; o<15; o++) {
      fWeights1[o] = ActivationFnc(fWeights1[o]);
   } // loop over o
   // layer 1 to 2
   for (int o=0; o<5; o++) {
      std::array<double, 16> buffer; // no need to initialise
      for (int i=0; i<16; i++) {
         buffer[i] = fWeightMatrix1to2[o][i] * fWeights1[i];
      } // loop over i
      for (int i=0; i<16; i++) {
         fWeights2[o] += buffer[i];
      } // loop over i
    } // loop over o
   for (int o=0; o<5; o++) {
      fWeights2[o] = ActivationFnc(fWeights2[o]);
   } // loop over o
   // layer 2 to 3
   for (int o=0; o<1; o++) {
      std::array<double, 6> buffer; // no need to initialise
      for (int i=0; i<6; i++) {
         buffer[i] = fWeightMatrix2to3[o][i] * fWeights2[i];
      } // loop over i
      for (int i=0; i<6; i++) {
         fWeights3[o] += buffer[i];
      } // loop over i
    } // loop over o
   for (int o=0; o<1; o++) {
      fWeights3[o] = OutputActivationFnc(fWeights3[o]);
   } // loop over o

   return fWeights3[0];
}

inline double ReadMLP1::ActivationFnc(double x) const {
   // fast hyperbolic tan approximation
   if (x > 4.97) return 1;
   if (x < -4.97) return -1;
   float x2 = x * x;
   float a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
   float b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
   return a / b;
}
inline double ReadMLP1::OutputActivationFnc(double x) const {
   // sigmoid
   return 1.0/(1.0+exp(-x));
}

// Clean up
inline void ReadMLP1::Clear()
{
}
   inline double ReadMLP1::GetMvaValue( const std::vector<double>& inputValues ) const
   {
      // classifier response value
      double retval = 0;

      // classifier response, sanity check first
      if (!IsStatusClean()) {
         std::cout << "Problem in class \"" << fClassName << "\": cannot return classifier response"
                   << " because status is dirty" << std::endl;
         retval = 0;
      }
      else {
            std::vector<double> iV(inputValues);
            Transform( iV, -1 );
            retval = GetMvaValue__( iV );
      }

      return retval;
   }

//_______________________________________________________________________
inline void ReadMLP1::InitTransform_1()
{
   double fMin_1[3][8];
   double fMax_1[3][8];
   // Normalization transformation, initialisation
   fMin_1[0][0] = 30.2008743286;
   fMax_1[0][0] = 952.444396973;
   fScal_1[0][0] = 2.0/(fMax_1[0][0]-fMin_1[0][0]);
   fOff_1[0][0] = fMin_1[0][0]*fScal_1[0][0]+1.;
   fMin_1[1][0] = 30.1909446716;
   fMax_1[1][0] = 1016.72784424;
   fScal_1[1][0] = 2.0/(fMax_1[1][0]-fMin_1[1][0]);
   fOff_1[1][0] = fMin_1[1][0]*fScal_1[1][0]+1.;
   fMin_1[2][0] = 30.1909446716;
   fMax_1[2][0] = 1016.72784424;
   fScal_1[2][0] = 2.0/(fMax_1[2][0]-fMin_1[2][0]);
   fOff_1[2][0] = fMin_1[2][0]*fScal_1[2][0]+1.;
   fMin_1[0][1] = -3.14155030251;
   fMax_1[0][1] = 3.14153671265;
   fScal_1[0][1] = 2.0/(fMax_1[0][1]-fMin_1[0][1]);
   fOff_1[0][1] = fMin_1[0][1]*fScal_1[0][1]+1.;
   fMin_1[1][1] = -3.14157652855;
   fMax_1[1][1] = 3.14153671265;
   fScal_1[1][1] = 2.0/(fMax_1[1][1]-fMin_1[1][1]);
   fOff_1[1][1] = fMin_1[1][1]*fScal_1[1][1]+1.;
   fMin_1[2][1] = -3.14157652855;
   fMax_1[2][1] = 3.14153671265;
   fScal_1[2][1] = 2.0/(fMax_1[2][1]-fMin_1[2][1]);
   fOff_1[2][1] = fMin_1[2][1]*fScal_1[2][1]+1.;
   fMin_1[0][2] = -2154.5;
   fMax_1[0][2] = 2154.5;
   fScal_1[0][2] = 2.0/(fMax_1[0][2]-fMin_1[0][2]);
   fOff_1[0][2] = fMin_1[0][2]*fScal_1[0][2]+1.;
   fMin_1[1][2] = -2154.5;
   fMax_1[1][2] = 2154.5;
   fScal_1[1][2] = 2.0/(fMax_1[1][2]-fMin_1[1][2]);
   fOff_1[1][2] = fMin_1[1][2]*fScal_1[1][2]+1.;
   fMin_1[2][2] = -2154.5;
   fMax_1[2][2] = 2154.5;
   fScal_1[2][2] = 2.0/(fMax_1[2][2]-fMin_1[2][2]);
   fOff_1[2][2] = fMin_1[2][2]*fScal_1[2][2]+1.;
   fMin_1[0][3] = 30.8757247925;
   fMax_1[0][3] = 900.828308105;
   fScal_1[0][3] = 2.0/(fMax_1[0][3]-fMin_1[0][3]);
   fOff_1[0][3] = fMin_1[0][3]*fScal_1[0][3]+1.;
   fMin_1[1][3] = 30.2008743286;
   fMax_1[1][3] = 903.067932129;
   fScal_1[1][3] = 2.0/(fMax_1[1][3]-fMin_1[1][3]);
   fOff_1[1][3] = fMin_1[1][3]*fScal_1[1][3]+1.;
   fMin_1[2][3] = 30.2008743286;
   fMax_1[2][3] = 903.067932129;
   fScal_1[2][3] = 2.0/(fMax_1[2][3]-fMin_1[2][3]);
   fOff_1[2][3] = fMin_1[2][3]*fScal_1[2][3]+1.;
   fMin_1[0][4] = -3.14157295227;
   fMax_1[0][4] = 3.14157223701;
   fScal_1[0][4] = 2.0/(fMax_1[0][4]-fMin_1[0][4]);
   fOff_1[0][4] = fMin_1[0][4]*fScal_1[0][4]+1.;
   fMin_1[1][4] = -3.14155578613;
   fMax_1[1][4] = 3.14157223701;
   fScal_1[1][4] = 2.0/(fMax_1[1][4]-fMin_1[1][4]);
   fOff_1[1][4] = fMin_1[1][4]*fScal_1[1][4]+1.;
   fMin_1[2][4] = -3.14157295227;
   fMax_1[2][4] = 3.14157223701;
   fScal_1[2][4] = 2.0/(fMax_1[2][4]-fMin_1[2][4]);
   fOff_1[2][4] = fMin_1[2][4]*fScal_1[2][4]+1.;
   fMin_1[0][5] = -2554.5;
   fMax_1[0][5] = 2554.5;
   fScal_1[0][5] = 2.0/(fMax_1[0][5]-fMin_1[0][5]);
   fOff_1[0][5] = fMin_1[0][5]*fScal_1[0][5]+1.;
   fMin_1[1][5] = -2554.5;
   fMax_1[1][5] = 2554.5;
   fScal_1[1][5] = 2.0/(fMax_1[1][5]-fMin_1[1][5]);
   fOff_1[1][5] = fMin_1[1][5]*fScal_1[1][5]+1.;
   fMin_1[2][5] = -2554.5;
   fMax_1[2][5] = 2554.5;
   fScal_1[2][5] = 2.0/(fMax_1[2][5]-fMin_1[2][5]);
   fOff_1[2][5] = fMin_1[2][5]*fScal_1[2][5]+1.;
   fMin_1[0][6] = 2.74715353044e-06;
   fMax_1[0][6] = 1.22982347012;
   fScal_1[0][6] = 2.0/(fMax_1[0][6]-fMin_1[0][6]);
   fOff_1[0][6] = fMin_1[0][6]*fScal_1[0][6]+1.;
   fMin_1[1][6] = 0.000379203091143;
   fMax_1[1][6] = 1.47594094276;
   fScal_1[1][6] = 2.0/(fMax_1[1][6]-fMin_1[1][6]);
   fOff_1[1][6] = fMin_1[1][6]*fScal_1[1][6]+1.;
   fMin_1[2][6] = 2.74715353044e-06;
   fMax_1[2][6] = 1.47594094276;
   fScal_1[2][6] = 2.0/(fMax_1[2][6]-fMin_1[2][6]);
   fOff_1[2][6] = fMin_1[2][6]*fScal_1[2][6]+1.;
   fMin_1[0][7] = 4.43917379016e-05;
   fMax_1[0][7] = 1.35731244087;
   fScal_1[0][7] = 2.0/(fMax_1[0][7]-fMin_1[0][7]);
   fOff_1[0][7] = fMin_1[0][7]*fScal_1[0][7]+1.;
   fMin_1[1][7] = 0.000288746319711;
   fMax_1[1][7] = 1.48255169392;
   fScal_1[1][7] = 2.0/(fMax_1[1][7]-fMin_1[1][7]);
   fOff_1[1][7] = fMin_1[1][7]*fScal_1[1][7]+1.;
   fMin_1[2][7] = 4.43917379016e-05;
   fMax_1[2][7] = 1.48255169392;
   fScal_1[2][7] = 2.0/(fMax_1[2][7]-fMin_1[2][7]);
   fOff_1[2][7] = fMin_1[2][7]*fScal_1[2][7]+1.;
}

//_______________________________________________________________________
inline void ReadMLP1::Transform_1( std::vector<double>& iv, int cls) const
{
   // Normalization transformation
   if (cls < 0 || cls > 2) {
   if (2 > 1 ) cls = 2;
      else cls = 2;
   }
   const int nVar = 8;

   // get indices of used variables

   // define the indices of the variables which are transformed by this transformation
   static std::vector<int> indicesGet;
   static std::vector<int> indicesPut;

   if ( indicesGet.empty() ) {
      indicesGet.reserve(fNvars);
      indicesGet.push_back( 0);
      indicesGet.push_back( 1);
      indicesGet.push_back( 2);
      indicesGet.push_back( 3);
      indicesGet.push_back( 4);
      indicesGet.push_back( 5);
      indicesGet.push_back( 6);
      indicesGet.push_back( 7);
   }
   if ( indicesPut.empty() ) {
      indicesPut.reserve(fNvars);
      indicesPut.push_back( 0);
      indicesPut.push_back( 1);
      indicesPut.push_back( 2);
      indicesPut.push_back( 3);
      indicesPut.push_back( 4);
      indicesPut.push_back( 5);
      indicesPut.push_back( 6);
      indicesPut.push_back( 7);
   }

   std::vector<double> dv;
   dv.resize(nVar);
   for (int ivar=0; ivar<nVar; ivar++) dv[ivar] = iv[indicesGet.at(ivar)];
   for (int ivar=0;ivar<8;ivar++) {
      double offset = fOff_1[cls][ivar];
      double scale  = fScal_1[cls][ivar];
      iv[indicesPut.at(ivar)] = scale*dv[ivar]-offset;
   }
}

//_______________________________________________________________________
inline void ReadMLP1::InitTransform()
{
   InitTransform_1();
}

//_______________________________________________________________________
inline void ReadMLP1::Transform( std::vector<double>& iv, int sigOrBgd ) const
{
   Transform_1( iv, sigOrBgd );
}
#endif
