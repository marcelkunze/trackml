#ifndef TMVAClassification_MLP1_H
#define TMVAClassification_MLP1_H
// Class: ReadMLP1
// Automatically generated by MethodBase::MakeClass
//

/* configuration options =====================================================

#GEN -*-*-*-*-*-*-*-*-*-*-*- general info -*-*-*-*-*-*-*-*-*-*-*-

Method         : MLP::MLP1
TMVA Release   : 4.2.1         [262657]
ROOT Release   : 6.16/00       [397312]
Creator        : marcel
Date           : Mon Jun  3 07:08:19 2019
Host           : Linux SFT-ubuntu-1804-3 4.15.0-38-generic #41-Ubuntu SMP Wed Oct 10 10:59:38 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
Dir            : /home/marcel/workspace/tracking/macro
Training events: 600000
Analysis type  : [Classification]


#OPT -*-*-*-*-*-*-*-*-*-*-*-*- options -*-*-*-*-*-*-*-*-*-*-*-*-

# Set by User:
NCycles: "500" [Number of training cycles]
HiddenLayers: "15,5" [Specification of hidden layer architecture]
NeuronType: "tanh" [Neuron activation function type]
V: "False" [Verbose output (short form of "VerbosityLevel" below - overrides the latter one)]
VarTransform: "N" [List of variable transformations performed before training, e.g., "D_Background,P_Signal,G,N_AllClasses" for: "Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)"]
H: "False" [Print method-specific help message]
TestRate: "5" [Test for overtraining performed at each #th epochs]
UseRegulator: "False" [Use regulator to avoid over-training]
# Default:
RandomSeed: "1" [Random seed for initial synapse weights (0 means unique seed for each run; default value '1')]
EstimatorType: "CE" [MSE (Mean Square Estimator) for Gaussian Likelihood or CE(Cross-Entropy) for Bernoulli Likelihood]
NeuronInputType: "sum" [Neuron input function type]
VerbosityLevel: "Default" [Verbosity level]
CreateMVAPdfs: "False" [Create PDFs for classifier outputs (signal and background)]
IgnoreNegWeightsInTraining: "False" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]
TrainingMethod: "BP" [Train with Back-Propagation (BP), BFGS Algorithm (BFGS), or Genetic Algorithm (GA - slower and worse)]
LearningRate: "2.000000e-02" [ANN learning rate parameter]
DecayRate: "1.000000e-02" [Decay rate for learning parameter]
EpochMonitoring: "False" [Provide epoch-wise monitoring plots according to TestRate (caution: causes big ROOT output file!)]
Sampling: "1.000000e+00" [Only 'Sampling' (randomly selected) events are trained each epoch]
SamplingEpoch: "1.000000e+00" [Sampling is used for the first 'SamplingEpoch' epochs, afterwards, all events are taken for training]
SamplingImportance: "1.000000e+00" [ The sampling weights of events in epochs which successful (worse estimator than before) are multiplied with SamplingImportance, else they are divided.]
SamplingTraining: "True" [The training sample is sampled]
SamplingTesting: "False" [The testing sample is sampled]
ResetStep: "50" [How often BFGS should reset history]
Tau: "3.000000e+00" [LineSearch "size step"]
BPMode: "sequential" [Back-propagation learning mode: sequential or batch]
BatchSize: "-1" [Batch size: number of events/batch, only set if in Batch Mode, -1 for BatchSize=number_of_events]
ConvergenceImprove: "1.000000e-30" [Minimum improvement which counts as improvement (<0 means automatic convergence check is turned off)]
ConvergenceTests: "-1" [Number of steps (without improvement) required for convergence (<0 means automatic convergence check is turned off)]
UpdateLimit: "10000" [Maximum times of regulator update]
CalculateErrors: "False" [Calculates inverse Hessian matrix at the end of the training to be able to calculate the uncertainties of an MVA value]
WeightRange: "1.000000e+00" [Take the events for the estimator calculations from small deviations from the desired value to large deviations only over the weight range]
##


#VAR -*-*-*-*-*-*-*-*-*-*-*-* variables *-*-*-*-*-*-*-*-*-*-*-*-

NVar 8
rz1                           rz1                           rz1                           rz1                                                             'F'    [30.1909446716,1016.72784424]
abs(abs(phi1)-1.57079632679)   abs_abs_phi1__M_1.57079632679_ abs(abs(phi1)-1.57079632679)   abs(abs(phi1)-1.57079632679)                                      'F'    [4.37162874789e-08,1.57078015804]
abs(z1)                       abs_z1_                       abs(z1)                       abs(z1)                                                         'F'    [597.5,2154.5]
rz2                           rz2                           rz2                           rz2                                                             'F'    [30.2008743286,903.067932129]
abs(abs(phi2)-1.57079632679)   abs_abs_phi2__M_1.57079632679_ abs(abs(phi2)-1.57079632679)   abs(abs(phi2)-1.57079632679)                                      'F'    [4.37162874789e-08,1.57077658176]
abs(z2)                       abs_z2_                       abs(z2)                       abs(z2)                                                         'F'    [667.600036621,2554.5]
f0                            f0                            f0                            f0                                                              'F'    [2.74715353044e-06,1.47594094276]
f1                            f1                            f1                            f1                                                              'F'    [4.43917379016e-05,1.48255169392]
NSpec 0


============================================================================ */

#include <array>
#include <vector>
#include <cmath>
#include <string>
#include <iostream>

#ifndef IClassifierReader__def
#define IClassifierReader__def

class IClassifierReader {

 public:

   // constructor
   IClassifierReader() : fStatusIsClean( true ) {}
   virtual ~IClassifierReader() {}

   // return classifier response
   virtual double GetMvaValue( const std::vector<double>& inputValues ) const = 0;

   // returns classifier status
   bool IsStatusClean() const { return fStatusIsClean; }

 protected:

   bool fStatusIsClean;
};

#endif

class ReadMLP1 : public IClassifierReader {

 public:

   // constructor
   ReadMLP1( std::vector<std::string>& theInputVars )
      : IClassifierReader(),
        fClassName( "ReadMLP1" ),
        fNvars( 8 )
   {
      // the training input variables
      const char* inputVars[] = { "rz1", "abs(abs(phi1)-1.57079632679)", "abs(z1)", "rz2", "abs(abs(phi2)-1.57079632679)", "abs(z2)", "f0", "f1" };

      // sanity checks
      if (theInputVars.size() <= 0) {
         std::cout << "Problem in class \"" << fClassName << "\": empty input vector" << std::endl;
         fStatusIsClean = false;
      }

      if (theInputVars.size() != fNvars) {
         std::cout << "Problem in class \"" << fClassName << "\": mismatch in number of input values: "
                   << theInputVars.size() << " != " << fNvars << std::endl;
         fStatusIsClean = false;
      }

      // validate input variables
      for (size_t ivar = 0; ivar < theInputVars.size(); ivar++) {
         if (theInputVars[ivar] != inputVars[ivar]) {
            std::cout << "Problem in class \"" << fClassName << "\": mismatch in input variable names" << std::endl
                      << " for variable [" << ivar << "]: " << theInputVars[ivar].c_str() << " != " << inputVars[ivar] << std::endl;
            fStatusIsClean = false;
         }
      }

      // initialize min and max vectors (for normalisation)
      fVmin[0] = -1;
      fVmax[0] = 1;
      fVmin[1] = -1;
      fVmax[1] = 0.99999988079071;
      fVmin[2] = -1;
      fVmax[2] = 1;
      fVmin[3] = -1;
      fVmax[3] = 1;
      fVmin[4] = -1;
      fVmax[4] = 1;
      fVmin[5] = -1;
      fVmax[5] = 1;
      fVmin[6] = -1;
      fVmax[6] = 0.99999988079071;
      fVmin[7] = -1;
      fVmax[7] = 0.99999988079071;

      // initialize input variable types
      fType[0] = 'F';
      fType[1] = 'F';
      fType[2] = 'F';
      fType[3] = 'F';
      fType[4] = 'F';
      fType[5] = 'F';
      fType[6] = 'F';
      fType[7] = 'F';

      // initialize constants
      Initialize();

      // initialize transformation
      InitTransform();
   }

   // destructor
   virtual ~ReadMLP1() {
      Clear(); // method-specific
   }

   // the classifier response
   // "inputValues" is a vector of input values in the same order as the
   // variables given to the constructor
   double GetMvaValue( const std::vector<double>& inputValues ) const override;

 private:

   // method-specific destructor
   void Clear();

   // input variable transformation

   double fOff_1[3][8];
   double fScal_1[3][8];
   void InitTransform_1();
   void Transform_1( std::vector<double> & iv, int sigOrBgd ) const;
   void InitTransform();
   void Transform( std::vector<double> & iv, int sigOrBgd ) const;

   // common member variables
   const char* fClassName;

   const size_t fNvars;
   size_t GetNvar()           const { return fNvars; }
   char   GetType( int ivar ) const { return fType[ivar]; }

   // normalisation of input variables
   double fVmin[8];
   double fVmax[8];
   double NormVariable( double x, double xmin, double xmax ) const {
      // normalise to output range: [-1, 1]
      return 2*(x - xmin)/(xmax - xmin) - 1.0;
   }

   // type of input variable: 'F' or 'I'
   char   fType[8];

   // initialize internal variables
   void Initialize();
   double GetMvaValue__( const std::vector<double>& inputValues ) const;

   // private members (method specific)

   double ActivationFnc(double x) const;
   double OutputActivationFnc(double x) const;

   double fWeightMatrix0to1[16][9];   // weight matrix from layer 0 to 1
   double fWeightMatrix1to2[6][16];   // weight matrix from layer 1 to 2
   double fWeightMatrix2to3[1][6];   // weight matrix from layer 2 to 3

};

inline void ReadMLP1::Initialize()
{
   // build network structure
   // weight matrix from layer 0 to 1
   fWeightMatrix0to1[0][0] = 9.29531607733876;
   fWeightMatrix0to1[1][0] = 24.2199155748756;
   fWeightMatrix0to1[2][0] = 27.4720234452024;
   fWeightMatrix0to1[3][0] = -20.3285765675001;
   fWeightMatrix0to1[4][0] = -61.8733149032875;
   fWeightMatrix0to1[5][0] = -17.1167077770666;
   fWeightMatrix0to1[6][0] = -126.410325240637;
   fWeightMatrix0to1[7][0] = 18.6092651733522;
   fWeightMatrix0to1[8][0] = -4.73082838595988;
   fWeightMatrix0to1[9][0] = -1.30267728613613;
   fWeightMatrix0to1[10][0] = -9.08593550451111;
   fWeightMatrix0to1[11][0] = 7.09960424977808;
   fWeightMatrix0to1[12][0] = -12.9241146831244;
   fWeightMatrix0to1[13][0] = -4.3792792691052;
   fWeightMatrix0to1[14][0] = 33.0069465947674;
   fWeightMatrix0to1[0][1] = 56.3843218241932;
   fWeightMatrix0to1[1][1] = -1.99508859361228;
   fWeightMatrix0to1[2][1] = 19.0789057436922;
   fWeightMatrix0to1[3][1] = 4.40687969336268;
   fWeightMatrix0to1[4][1] = 5.09437715652439;
   fWeightMatrix0to1[5][1] = -0.648733423914953;
   fWeightMatrix0to1[6][1] = 1.9974813389639;
   fWeightMatrix0to1[7][1] = 52.9639499423567;
   fWeightMatrix0to1[8][1] = -11.6653161177029;
   fWeightMatrix0to1[9][1] = 0.539233104970659;
   fWeightMatrix0to1[10][1] = 0.479693833434529;
   fWeightMatrix0to1[11][1] = 11.9903781698137;
   fWeightMatrix0to1[12][1] = 0.773299483527315;
   fWeightMatrix0to1[13][1] = 0.524692034844519;
   fWeightMatrix0to1[14][1] = -2.36014240054838;
   fWeightMatrix0to1[0][2] = 15.5228507682786;
   fWeightMatrix0to1[1][2] = -4.04219767337418;
   fWeightMatrix0to1[2][2] = -10.2487862108939;
   fWeightMatrix0to1[3][2] = 10.4333977266718;
   fWeightMatrix0to1[4][2] = 7.71624638728802;
   fWeightMatrix0to1[5][2] = -0.603296051995054;
   fWeightMatrix0to1[6][2] = 7.72344605223133;
   fWeightMatrix0to1[7][2] = -17.9091301535836;
   fWeightMatrix0to1[8][2] = -1.0381981579303;
   fWeightMatrix0to1[9][2] = 0.662493093167813;
   fWeightMatrix0to1[10][2] = 2.16393836275518;
   fWeightMatrix0to1[11][2] = -1.00167749872436;
   fWeightMatrix0to1[12][2] = 22.3417199963337;
   fWeightMatrix0to1[13][2] = 2.5214913320365;
   fWeightMatrix0to1[14][2] = -11.7169889707255;
   fWeightMatrix0to1[0][3] = -19.0468192138733;
   fWeightMatrix0to1[1][3] = 0.704812346757121;
   fWeightMatrix0to1[2][3] = -20.1389078746339;
   fWeightMatrix0to1[3][3] = 16.0514792988539;
   fWeightMatrix0to1[4][3] = 41.8859532319438;
   fWeightMatrix0to1[5][3] = 10.9306105406853;
   fWeightMatrix0to1[6][3] = 100.467067143663;
   fWeightMatrix0to1[7][3] = -3.11280880873684;
   fWeightMatrix0to1[8][3] = 9.14401177776662;
   fWeightMatrix0to1[9][3] = 0.475232490501477;
   fWeightMatrix0to1[10][3] = 0.157168707432349;
   fWeightMatrix0to1[11][3] = 3.68390804245618;
   fWeightMatrix0to1[12][3] = 5.69382376109417;
   fWeightMatrix0to1[13][3] = 7.52224020971684;
   fWeightMatrix0to1[14][3] = -22.2948444401523;
   fWeightMatrix0to1[0][4] = -56.4079246025525;
   fWeightMatrix0to1[1][4] = 1.99211593295973;
   fWeightMatrix0to1[2][4] = -19.0635662719801;
   fWeightMatrix0to1[3][4] = -4.40913731671753;
   fWeightMatrix0to1[4][4] = -5.07863648876221;
   fWeightMatrix0to1[5][4] = 0.625100278949726;
   fWeightMatrix0to1[6][4] = -1.97282977843595;
   fWeightMatrix0to1[7][4] = -52.942696809076;
   fWeightMatrix0to1[8][4] = 11.6729840330709;
   fWeightMatrix0to1[9][4] = -0.284928051053331;
   fWeightMatrix0to1[10][4] = -0.456121115798117;
   fWeightMatrix0to1[11][4] = -12.069818626823;
   fWeightMatrix0to1[12][4] = -0.787249059619536;
   fWeightMatrix0to1[13][4] = -0.578619334500207;
   fWeightMatrix0to1[14][4] = 2.3886242016255;
   fWeightMatrix0to1[0][5] = -15.4978524170503;
   fWeightMatrix0to1[1][5] = 4.21265873944431;
   fWeightMatrix0to1[2][5] = 10.3709781976299;
   fWeightMatrix0to1[3][5] = -10.6143585668516;
   fWeightMatrix0to1[4][5] = -7.18855540123124;
   fWeightMatrix0to1[5][5] = 2.16401965909286;
   fWeightMatrix0to1[6][5] = -8.83277333175849;
   fWeightMatrix0to1[7][5] = 17.7755510118192;
   fWeightMatrix0to1[8][5] = -1.93381037118518;
   fWeightMatrix0to1[9][5] = -0.298680819018605;
   fWeightMatrix0to1[10][5] = 4.7168101038471;
   fWeightMatrix0to1[11][5] = -4.67685209011596;
   fWeightMatrix0to1[12][5] = -14.11848408637;
   fWeightMatrix0to1[13][5] = -5.66169724192816;
   fWeightMatrix0to1[14][5] = 11.5565749443796;
   fWeightMatrix0to1[0][6] = 0.440302263418306;
   fWeightMatrix0to1[1][6] = -1.41338386517265;
   fWeightMatrix0to1[2][6] = 0.570429151775713;
   fWeightMatrix0to1[3][6] = -0.447140584657728;
   fWeightMatrix0to1[4][6] = 0.891269749511014;
   fWeightMatrix0to1[5][6] = 8.43376691861908;
   fWeightMatrix0to1[6][6] = -0.748549638235357;
   fWeightMatrix0to1[7][6] = -0.0742497721616507;
   fWeightMatrix0to1[8][6] = -9.25481527994776;
   fWeightMatrix0to1[9][6] = -1.8233109385432;
   fWeightMatrix0to1[10][6] = 2.2956188850812;
   fWeightMatrix0to1[11][6] = -14.7114120446876;
   fWeightMatrix0to1[12][6] = -1.28001770549226;
   fWeightMatrix0to1[13][6] = 2.35426130911118;
   fWeightMatrix0to1[14][6] = -3.57345137805329;
   fWeightMatrix0to1[0][7] = 0.332530810505821;
   fWeightMatrix0to1[1][7] = 1.12558539142389;
   fWeightMatrix0to1[2][7] = 0.809226087636813;
   fWeightMatrix0to1[3][7] = -0.388957934288877;
   fWeightMatrix0to1[4][7] = 0.835755446973485;
   fWeightMatrix0to1[5][7] = 4.99353086089713;
   fWeightMatrix0to1[6][7] = -0.86215240874915;
   fWeightMatrix0to1[7][7] = -0.0181496083930824;
   fWeightMatrix0to1[8][7] = -12.5174946595819;
   fWeightMatrix0to1[9][7] = -1.94892901120599;
   fWeightMatrix0to1[10][7] = 14.0547121147089;
   fWeightMatrix0to1[11][7] = -20.4690301773693;
   fWeightMatrix0to1[12][7] = -2.16007274437367;
   fWeightMatrix0to1[13][7] = -2.0876706175056;
   fWeightMatrix0to1[14][7] = -4.07087133451494;
   fWeightMatrix0to1[0][8] = -9.32163738469455;
   fWeightMatrix0to1[1][8] = 17.0464225865695;
   fWeightMatrix0to1[2][8] = 8.6266024891903;
   fWeightMatrix0to1[3][8] = -5.81126550283669;
   fWeightMatrix0to1[4][8] = -18.1829133231036;
   fWeightMatrix0to1[5][8] = 3.9537160398142;
   fWeightMatrix0to1[6][8] = -29.1665816942618;
   fWeightMatrix0to1[7][8] = 15.5766847163478;
   fWeightMatrix0to1[8][8] = -12.0838355386476;
   fWeightMatrix0to1[9][8] = 5.22785986446536;
   fWeightMatrix0to1[10][8] = 6.9747485937926;
   fWeightMatrix0to1[11][8] = -14.5803717942161;
   fWeightMatrix0to1[12][8] = 1.04668429994399;
   fWeightMatrix0to1[13][8] = -4.39867809174064;
   fWeightMatrix0to1[14][8] = 3.33547085870272;
   // weight matrix from layer 1 to 2
   fWeightMatrix1to2[0][0] = -0.62585193188147;
   fWeightMatrix1to2[1][0] = 6.46360238947253;
   fWeightMatrix1to2[2][0] = -2.98568957305921;
   fWeightMatrix1to2[3][0] = -0.472819747261404;
   fWeightMatrix1to2[4][0] = 2.13010047771938;
   fWeightMatrix1to2[0][1] = 6.79610267135118;
   fWeightMatrix1to2[1][1] = 1.1694920593036;
   fWeightMatrix1to2[2][1] = 1.93688860717997;
   fWeightMatrix1to2[3][1] = 0.642321335362229;
   fWeightMatrix1to2[4][1] = 3.96115304424854;
   fWeightMatrix1to2[0][2] = 0.722133741434398;
   fWeightMatrix1to2[1][2] = 1.48045961756352;
   fWeightMatrix1to2[2][2] = -1.17695641699339;
   fWeightMatrix1to2[3][2] = 0.487669828757962;
   fWeightMatrix1to2[4][2] = 1.35030358209742;
   fWeightMatrix1to2[0][3] = -1.1588511293092;
   fWeightMatrix1to2[1][3] = -4.66638523178712;
   fWeightMatrix1to2[2][3] = 3.60916160424359;
   fWeightMatrix1to2[3][3] = -0.983192720075364;
   fWeightMatrix1to2[4][3] = -1.54240832259278;
   fWeightMatrix1to2[0][4] = -0.801647539807417;
   fWeightMatrix1to2[1][4] = -2.73298669194204;
   fWeightMatrix1to2[2][4] = 3.48129453400997;
   fWeightMatrix1to2[3][4] = -1.25911704764124;
   fWeightMatrix1to2[4][4] = -3.36430400865206;
   fWeightMatrix1to2[0][5] = 3.82770757928571;
   fWeightMatrix1to2[1][5] = 1.21488222723375;
   fWeightMatrix1to2[2][5] = -2.46807419019067;
   fWeightMatrix1to2[3][5] = -0.278703989366923;
   fWeightMatrix1to2[4][5] = -0.0497364669932243;
   fWeightMatrix1to2[0][6] = -1.53945907901598;
   fWeightMatrix1to2[1][6] = 0.262073492215631;
   fWeightMatrix1to2[2][6] = 1.36824601841991;
   fWeightMatrix1to2[3][6] = -3.1766488354845;
   fWeightMatrix1to2[4][6] = -10.3748204596382;
   fWeightMatrix1to2[0][7] = 0.30801302997593;
   fWeightMatrix1to2[1][7] = -5.33625221878064;
   fWeightMatrix1to2[2][7] = 2.02414388948834;
   fWeightMatrix1to2[3][7] = 0.538924596082753;
   fWeightMatrix1to2[4][7] = -0.337236564960762;
   fWeightMatrix1to2[0][8] = -1.35326695565798;
   fWeightMatrix1to2[1][8] = -3.84971282582955;
   fWeightMatrix1to2[2][8] = 1.55261462571591;
   fWeightMatrix1to2[3][8] = -0.211751967797067;
   fWeightMatrix1to2[4][8] = -12.1715910774383;
   fWeightMatrix1to2[0][9] = -7.72092216661227;
   fWeightMatrix1to2[1][9] = 5.97528914859743;
   fWeightMatrix1to2[2][9] = 3.30026526709476;
   fWeightMatrix1to2[3][9] = -2.58943433631944;
   fWeightMatrix1to2[4][9] = 7.64568317642783;
   fWeightMatrix1to2[0][10] = -2.16425778406028;
   fWeightMatrix1to2[1][10] = 0.21026867851794;
   fWeightMatrix1to2[2][10] = -0.754358257298778;
   fWeightMatrix1to2[3][10] = -0.40074681703492;
   fWeightMatrix1to2[4][10] = -0.396321014379702;
   fWeightMatrix1to2[0][11] = -2.16732124661888;
   fWeightMatrix1to2[1][11] = 5.36180989058873;
   fWeightMatrix1to2[2][11] = -3.41175625554013;
   fWeightMatrix1to2[3][11] = 18.2183232784116;
   fWeightMatrix1to2[4][11] = -6.24834454737291;
   fWeightMatrix1to2[0][12] = -1.08889218498217;
   fWeightMatrix1to2[1][12] = -5.75967217569986;
   fWeightMatrix1to2[2][12] = -0.704376138098057;
   fWeightMatrix1to2[3][12] = -1.28467257697354;
   fWeightMatrix1to2[4][12] = -3.80628298664413;
   fWeightMatrix1to2[0][13] = -1.35251905326944;
   fWeightMatrix1to2[1][13] = 1.83227706624805;
   fWeightMatrix1to2[2][13] = -0.703729442577782;
   fWeightMatrix1to2[3][13] = 9.55308574202011;
   fWeightMatrix1to2[4][13] = -7.7326556431077;
   fWeightMatrix1to2[0][14] = -4.08640815409295;
   fWeightMatrix1to2[1][14] = 0.643614566698289;
   fWeightMatrix1to2[2][14] = -0.240683471968062;
   fWeightMatrix1to2[3][14] = 0.525838986611526;
   fWeightMatrix1to2[4][14] = 1.53774293138419;
   fWeightMatrix1to2[0][15] = -8.43391249922551;
   fWeightMatrix1to2[1][15] = 5.34812377253708;
   fWeightMatrix1to2[2][15] = -2.94287997671397;
   fWeightMatrix1to2[3][15] = -3.29107729891717;
   fWeightMatrix1to2[4][15] = 10.1866265925962;
   // weight matrix from layer 2 to 3
   fWeightMatrix2to3[0][0] = 6.58717156292188;
   fWeightMatrix2to3[0][1] = -1.57728864450249;
   fWeightMatrix2to3[0][2] = 2.79162025992948;
   fWeightMatrix2to3[0][3] = 5.54480413228715;
   fWeightMatrix2to3[0][4] = -1.90850988859641;
   fWeightMatrix2to3[0][5] = 0.244117661385233;
}

inline double ReadMLP1::GetMvaValue__( const std::vector<double>& inputValues ) const
{
   if (inputValues.size() != (unsigned int)8) {
      std::cout << "Input vector needs to be of size " << 8 << std::endl;
      return 0;
   }

   std::array<double, 16> fWeights1 {{}};
   std::array<double, 6> fWeights2 {{}};
   std::array<double, 1> fWeights3 {{}};
   fWeights1.back() = 1.;
   fWeights2.back() = 1.;

   // layer 0 to 1
   for (int o=0; o<15; o++) {
      std::array<double, 9> buffer; // no need to initialise
      for (int i = 0; i<9 - 1; i++) {
         buffer[i] = fWeightMatrix0to1[o][i] * inputValues[i];
      } // loop over i
      buffer.back() = fWeightMatrix0to1[o][8];      for (int i=0; i<9; i++) {
         fWeights1[o] += buffer[i];
      } // loop over i
    } // loop over o
   for (int o=0; o<15; o++) {
      fWeights1[o] = ActivationFnc(fWeights1[o]);
   } // loop over o
   // layer 1 to 2
   for (int o=0; o<5; o++) {
      std::array<double, 16> buffer; // no need to initialise
      for (int i=0; i<16; i++) {
         buffer[i] = fWeightMatrix1to2[o][i] * fWeights1[i];
      } // loop over i
      for (int i=0; i<16; i++) {
         fWeights2[o] += buffer[i];
      } // loop over i
    } // loop over o
   for (int o=0; o<5; o++) {
      fWeights2[o] = ActivationFnc(fWeights2[o]);
   } // loop over o
   // layer 2 to 3
   for (int o=0; o<1; o++) {
      std::array<double, 6> buffer; // no need to initialise
      for (int i=0; i<6; i++) {
         buffer[i] = fWeightMatrix2to3[o][i] * fWeights2[i];
      } // loop over i
      for (int i=0; i<6; i++) {
         fWeights3[o] += buffer[i];
      } // loop over i
    } // loop over o
   for (int o=0; o<1; o++) {
      fWeights3[o] = OutputActivationFnc(fWeights3[o]);
   } // loop over o

   return fWeights3[0];
}

inline double ReadMLP1::ActivationFnc(double x) const {
   // fast hyperbolic tan approximation
   if (x > 4.97) return 1;
   if (x < -4.97) return -1;
   float x2 = x * x;
   float a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
   float b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
   return a / b;
}
inline double ReadMLP1::OutputActivationFnc(double x) const {
   // sigmoid
   return 1.0/(1.0+exp(-x));
}

// Clean up
inline void ReadMLP1::Clear()
{
}
   inline double ReadMLP1::GetMvaValue( const std::vector<double>& inputValues ) const
   {
      // classifier response value
      double retval = 0;

      // classifier response, sanity check first
      if (!IsStatusClean()) {
         std::cout << "Problem in class \"" << fClassName << "\": cannot return classifier response"
                   << " because status is dirty" << std::endl;
         retval = 0;
      }
      else {
            std::vector<double> iV(inputValues);
            Transform( iV, -1 );
            retval = GetMvaValue__( iV );
      }

      return retval;
   }

//_______________________________________________________________________
inline void ReadMLP1::InitTransform_1()
{
   double fMin_1[3][8];
   double fMax_1[3][8];
   // Normalization transformation, initialisation
   fMin_1[0][0] = 30.2008743286;
   fMax_1[0][0] = 952.444396973;
   fScal_1[0][0] = 2.0/(fMax_1[0][0]-fMin_1[0][0]);
   fOff_1[0][0] = fMin_1[0][0]*fScal_1[0][0]+1.;
   fMin_1[1][0] = 30.1909446716;
   fMax_1[1][0] = 1016.72784424;
   fScal_1[1][0] = 2.0/(fMax_1[1][0]-fMin_1[1][0]);
   fOff_1[1][0] = fMin_1[1][0]*fScal_1[1][0]+1.;
   fMin_1[2][0] = 30.1909446716;
   fMax_1[2][0] = 1016.72784424;
   fScal_1[2][0] = 2.0/(fMax_1[2][0]-fMin_1[2][0]);
   fOff_1[2][0] = fMin_1[2][0]*fScal_1[2][0]+1.;
   fMin_1[0][1] = 4.37162874789e-08;
   fMax_1[0][1] = 1.57077634335;
   fScal_1[0][1] = 2.0/(fMax_1[0][1]-fMin_1[0][1]);
   fOff_1[0][1] = fMin_1[0][1]*fScal_1[0][1]+1.;
   fMin_1[1][1] = 4.37162874789e-08;
   fMax_1[1][1] = 1.57078015804;
   fScal_1[1][1] = 2.0/(fMax_1[1][1]-fMin_1[1][1]);
   fOff_1[1][1] = fMin_1[1][1]*fScal_1[1][1]+1.;
   fMin_1[2][1] = 4.37162874789e-08;
   fMax_1[2][1] = 1.57078015804;
   fScal_1[2][1] = 2.0/(fMax_1[2][1]-fMin_1[2][1]);
   fOff_1[2][1] = fMin_1[2][1]*fScal_1[2][1]+1.;
   fMin_1[0][2] = 597.5;
   fMax_1[0][2] = 2154.5;
   fScal_1[0][2] = 2.0/(fMax_1[0][2]-fMin_1[0][2]);
   fOff_1[0][2] = fMin_1[0][2]*fScal_1[0][2]+1.;
   fMin_1[1][2] = 597.5;
   fMax_1[1][2] = 2154.5;
   fScal_1[1][2] = 2.0/(fMax_1[1][2]-fMin_1[1][2]);
   fOff_1[1][2] = fMin_1[1][2]*fScal_1[1][2]+1.;
   fMin_1[2][2] = 597.5;
   fMax_1[2][2] = 2154.5;
   fScal_1[2][2] = 2.0/(fMax_1[2][2]-fMin_1[2][2]);
   fOff_1[2][2] = fMin_1[2][2]*fScal_1[2][2]+1.;
   fMin_1[0][3] = 30.8757247925;
   fMax_1[0][3] = 900.828308105;
   fScal_1[0][3] = 2.0/(fMax_1[0][3]-fMin_1[0][3]);
   fOff_1[0][3] = fMin_1[0][3]*fScal_1[0][3]+1.;
   fMin_1[1][3] = 30.2008743286;
   fMax_1[1][3] = 903.067932129;
   fScal_1[1][3] = 2.0/(fMax_1[1][3]-fMin_1[1][3]);
   fOff_1[1][3] = fMin_1[1][3]*fScal_1[1][3]+1.;
   fMin_1[2][3] = 30.2008743286;
   fMax_1[2][3] = 903.067932129;
   fScal_1[2][3] = 2.0/(fMax_1[2][3]-fMin_1[2][3]);
   fOff_1[2][3] = fMin_1[2][3]*fScal_1[2][3]+1.;
   fMin_1[0][4] = 4.37162874789e-08;
   fMax_1[0][4] = 1.57077658176;
   fScal_1[0][4] = 2.0/(fMax_1[0][4]-fMin_1[0][4]);
   fOff_1[0][4] = fMin_1[0][4]*fScal_1[0][4]+1.;
   fMin_1[1][4] = 4.37162874789e-08;
   fMax_1[1][4] = 1.57077646255;
   fScal_1[1][4] = 2.0/(fMax_1[1][4]-fMin_1[1][4]);
   fOff_1[1][4] = fMin_1[1][4]*fScal_1[1][4]+1.;
   fMin_1[2][4] = 4.37162874789e-08;
   fMax_1[2][4] = 1.57077658176;
   fScal_1[2][4] = 2.0/(fMax_1[2][4]-fMin_1[2][4]);
   fOff_1[2][4] = fMin_1[2][4]*fScal_1[2][4]+1.;
   fMin_1[0][5] = 697.5;
   fMax_1[0][5] = 2554.5;
   fScal_1[0][5] = 2.0/(fMax_1[0][5]-fMin_1[0][5]);
   fOff_1[0][5] = fMin_1[0][5]*fScal_1[0][5]+1.;
   fMin_1[1][5] = 667.600036621;
   fMax_1[1][5] = 2554.5;
   fScal_1[1][5] = 2.0/(fMax_1[1][5]-fMin_1[1][5]);
   fOff_1[1][5] = fMin_1[1][5]*fScal_1[1][5]+1.;
   fMin_1[2][5] = 667.600036621;
   fMax_1[2][5] = 2554.5;
   fScal_1[2][5] = 2.0/(fMax_1[2][5]-fMin_1[2][5]);
   fOff_1[2][5] = fMin_1[2][5]*fScal_1[2][5]+1.;
   fMin_1[0][6] = 2.74715353044e-06;
   fMax_1[0][6] = 1.22982347012;
   fScal_1[0][6] = 2.0/(fMax_1[0][6]-fMin_1[0][6]);
   fOff_1[0][6] = fMin_1[0][6]*fScal_1[0][6]+1.;
   fMin_1[1][6] = 0.000379203091143;
   fMax_1[1][6] = 1.47594094276;
   fScal_1[1][6] = 2.0/(fMax_1[1][6]-fMin_1[1][6]);
   fOff_1[1][6] = fMin_1[1][6]*fScal_1[1][6]+1.;
   fMin_1[2][6] = 2.74715353044e-06;
   fMax_1[2][6] = 1.47594094276;
   fScal_1[2][6] = 2.0/(fMax_1[2][6]-fMin_1[2][6]);
   fOff_1[2][6] = fMin_1[2][6]*fScal_1[2][6]+1.;
   fMin_1[0][7] = 4.43917379016e-05;
   fMax_1[0][7] = 1.35731244087;
   fScal_1[0][7] = 2.0/(fMax_1[0][7]-fMin_1[0][7]);
   fOff_1[0][7] = fMin_1[0][7]*fScal_1[0][7]+1.;
   fMin_1[1][7] = 0.000288746319711;
   fMax_1[1][7] = 1.48255169392;
   fScal_1[1][7] = 2.0/(fMax_1[1][7]-fMin_1[1][7]);
   fOff_1[1][7] = fMin_1[1][7]*fScal_1[1][7]+1.;
   fMin_1[2][7] = 4.43917379016e-05;
   fMax_1[2][7] = 1.48255169392;
   fScal_1[2][7] = 2.0/(fMax_1[2][7]-fMin_1[2][7]);
   fOff_1[2][7] = fMin_1[2][7]*fScal_1[2][7]+1.;
}

//_______________________________________________________________________
inline void ReadMLP1::Transform_1( std::vector<double>& iv, int cls) const
{
   // Normalization transformation
   if (cls < 0 || cls > 2) {
   if (2 > 1 ) cls = 2;
      else cls = 2;
   }
   const int nVar = 8;

   // get indices of used variables

   // define the indices of the variables which are transformed by this transformation
   static std::vector<int> indicesGet;
   static std::vector<int> indicesPut;

   if ( indicesGet.empty() ) {
      indicesGet.reserve(fNvars);
      indicesGet.push_back( 0);
      indicesGet.push_back( 1);
      indicesGet.push_back( 2);
      indicesGet.push_back( 3);
      indicesGet.push_back( 4);
      indicesGet.push_back( 5);
      indicesGet.push_back( 6);
      indicesGet.push_back( 7);
   }
   if ( indicesPut.empty() ) {
      indicesPut.reserve(fNvars);
      indicesPut.push_back( 0);
      indicesPut.push_back( 1);
      indicesPut.push_back( 2);
      indicesPut.push_back( 3);
      indicesPut.push_back( 4);
      indicesPut.push_back( 5);
      indicesPut.push_back( 6);
      indicesPut.push_back( 7);
   }

   std::vector<double> dv;
   dv.resize(nVar);
   for (int ivar=0; ivar<nVar; ivar++) dv[ivar] = iv[indicesGet.at(ivar)];
   for (int ivar=0;ivar<8;ivar++) {
      double offset = fOff_1[cls][ivar];
      double scale  = fScal_1[cls][ivar];
      iv[indicesPut.at(ivar)] = scale*dv[ivar]-offset;
   }
}

//_______________________________________________________________________
inline void ReadMLP1::InitTransform()
{
   InitTransform_1();
}

//_______________________________________________________________________
inline void ReadMLP1::Transform( std::vector<double>& iv, int sigOrBgd ) const
{
   Transform_1( iv, sigOrBgd );
}
#endif